// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package mpl_core_program

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// TransferV1 is the `TransferV1` instruction.
type TransferV1 struct {
	TransferV1Args *TransferV1Args

	// [0] = [WRITE] asset
	// ··········· The address of the asset
	//
	// [1] = [] collection
	// ··········· The collection to which the asset belongs
	//
	// [2] = [WRITE, SIGNER] payer
	// ··········· The account paying for the storage fees
	//
	// [3] = [SIGNER] authority
	// ··········· The owner or delegate of the asset
	//
	// [4] = [] newOwner
	// ··········· The new owner to which to transfer the asset
	//
	// [5] = [] systemProgram
	// ··········· The system program
	//
	// [6] = [] logWrapper
	// ··········· The SPL Noop Program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewTransferV1InstructionBuilder creates a new `TransferV1` instruction builder.
func NewTransferV1InstructionBuilder() *TransferV1 {
	nd := &TransferV1{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetTransferV1Args sets the "transferV1Args" parameter.
func (inst *TransferV1) SetTransferV1Args(transferV1Args TransferV1Args) *TransferV1 {
	inst.TransferV1Args = &transferV1Args
	return inst
}

// SetAssetAccount sets the "asset" account.
// The address of the asset
func (inst *TransferV1) SetAssetAccount(asset ag_solanago.PublicKey) *TransferV1 {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(asset).WRITE()
	return inst
}

// GetAssetAccount gets the "asset" account.
// The address of the asset
func (inst *TransferV1) GetAssetAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetCollectionAccount sets the "collection" account.
// The collection to which the asset belongs
func (inst *TransferV1) SetCollectionAccount(collection ag_solanago.PublicKey) *TransferV1 {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(collection)
	return inst
}

// GetCollectionAccount gets the "collection" account.
// The collection to which the asset belongs
func (inst *TransferV1) GetCollectionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPayerAccount sets the "payer" account.
// The account paying for the storage fees
func (inst *TransferV1) SetPayerAccount(payer ag_solanago.PublicKey) *TransferV1 {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
// The account paying for the storage fees
func (inst *TransferV1) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetAuthorityAccount sets the "authority" account.
// The owner or delegate of the asset
func (inst *TransferV1) SetAuthorityAccount(authority ag_solanago.PublicKey) *TransferV1 {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
// The owner or delegate of the asset
func (inst *TransferV1) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetNewOwnerAccount sets the "newOwner" account.
// The new owner to which to transfer the asset
func (inst *TransferV1) SetNewOwnerAccount(newOwner ag_solanago.PublicKey) *TransferV1 {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(newOwner)
	return inst
}

// GetNewOwnerAccount gets the "newOwner" account.
// The new owner to which to transfer the asset
func (inst *TransferV1) GetNewOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSystemProgramAccount sets the "systemProgram" account.
// The system program
func (inst *TransferV1) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *TransferV1 {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
// The system program
func (inst *TransferV1) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetLogWrapperAccount sets the "logWrapper" account.
// The SPL Noop Program
func (inst *TransferV1) SetLogWrapperAccount(logWrapper ag_solanago.PublicKey) *TransferV1 {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(logWrapper)
	return inst
}

// GetLogWrapperAccount gets the "logWrapper" account.
// The SPL Noop Program
func (inst *TransferV1) GetLogWrapperAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst TransferV1) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_TransferV1,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst TransferV1) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *TransferV1) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.TransferV1Args == nil {
			return errors.New("TransferV1Args parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Asset is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Collection is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.NewOwner is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.LogWrapper is not set")
		}
	}
	return nil
}

func (inst *TransferV1) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("TransferV1")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("TransferV1Args", *inst.TransferV1Args))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        asset", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("   collection", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("        payer", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("    authority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("     newOwner", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("   logWrapper", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj TransferV1) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TransferV1Args` param:
	err = encoder.Encode(obj.TransferV1Args)
	if err != nil {
		return err
	}
	return nil
}
func (obj *TransferV1) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TransferV1Args`:
	err = decoder.Decode(&obj.TransferV1Args)
	if err != nil {
		return err
	}
	return nil
}

// NewTransferV1Instruction declares a new TransferV1 instruction with the provided parameters and accounts.
func NewTransferV1Instruction(
	// Parameters:
	transferV1Args TransferV1Args,
	// Accounts:
	asset ag_solanago.PublicKey,
	collection ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	newOwner ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	logWrapper ag_solanago.PublicKey) *TransferV1 {
	return NewTransferV1InstructionBuilder().
		SetTransferV1Args(transferV1Args).
		SetAssetAccount(asset).
		SetCollectionAccount(collection).
		SetPayerAccount(payer).
		SetAuthorityAccount(authority).
		SetNewOwnerAccount(newOwner).
		SetSystemProgramAccount(systemProgram).
		SetLogWrapperAccount(logWrapper)
}
