// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package mpl_core_program

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type Uninitialized struct{}

var UninitializedDiscriminator = [8]byte{132, 237, 177, 126, 179, 60, 26, 153}

func (obj Uninitialized) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(UninitializedDiscriminator[:], false)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Uninitialized) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(UninitializedDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[132 237 177 126 179 60 26 153]",
				fmt.Sprint(discriminator[:]))
		}
	}
	return nil
}

type AssetV1 struct {
	Key             Key
	Owner           ag_solanago.PublicKey
	UpdateAuthority UpdateAuthority
	Name            string
	Uri             string
	Seq             *uint64 `bin:"optional"`
}

var AssetV1Discriminator = [8]byte{224, 17, 116, 157, 230, 212, 30, 218}

func (obj AssetV1) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(AssetV1Discriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Key` param:
	err = encoder.Encode(obj.Key)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `UpdateAuthority` param:
	{
		tmp := updateAuthorityContainer{}
		switch realvalue := obj.UpdateAuthority.(type) {
		case *UpdateAuthorityNone:
			tmp.Enum = 0
			tmp.None = *realvalue
		case *UpdateAuthorityAddress:
			tmp.Enum = 1
			tmp.Address = *realvalue
		case *UpdateAuthorityCollection:
			tmp.Enum = 2
			tmp.Collection = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Uri` param:
	err = encoder.Encode(obj.Uri)
	if err != nil {
		return err
	}
	// Serialize `Seq` param (optional):
	{
		if obj.Seq == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Seq)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *AssetV1) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(AssetV1Discriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[224 17 116 157 230 212 30 218]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Key`:
	err = decoder.Decode(&obj.Key)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `UpdateAuthority`:
	{
		tmp := new(updateAuthorityContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.UpdateAuthority = (*UpdateAuthorityNone)(&tmp.Enum)
		case 1:
			obj.UpdateAuthority = &tmp.Address
		case 2:
			obj.UpdateAuthority = &tmp.Collection
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Uri`:
	err = decoder.Decode(&obj.Uri)
	if err != nil {
		return err
	}
	// Deserialize `Seq` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Seq)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type HashedAssetV1 struct {
	Key  Key
	Hash [32]uint8
}

var HashedAssetV1Discriminator = [8]byte{197, 109, 46, 118, 127, 239, 126, 50}

func (obj HashedAssetV1) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(HashedAssetV1Discriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Key` param:
	err = encoder.Encode(obj.Key)
	if err != nil {
		return err
	}
	// Serialize `Hash` param:
	err = encoder.Encode(obj.Hash)
	if err != nil {
		return err
	}
	return nil
}

func (obj *HashedAssetV1) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(HashedAssetV1Discriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[197 109 46 118 127 239 126 50]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Key`:
	err = decoder.Decode(&obj.Key)
	if err != nil {
		return err
	}
	// Deserialize `Hash`:
	err = decoder.Decode(&obj.Hash)
	if err != nil {
		return err
	}
	return nil
}

type PluginHeaderV1 struct {
	Key                  Key
	PluginRegistryOffset uint64
}

var PluginHeaderV1Discriminator = [8]byte{237, 50, 165, 208, 38, 253, 153, 152}

func (obj PluginHeaderV1) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(PluginHeaderV1Discriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Key` param:
	err = encoder.Encode(obj.Key)
	if err != nil {
		return err
	}
	// Serialize `PluginRegistryOffset` param:
	err = encoder.Encode(obj.PluginRegistryOffset)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PluginHeaderV1) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(PluginHeaderV1Discriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[237 50 165 208 38 253 153 152]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Key`:
	err = decoder.Decode(&obj.Key)
	if err != nil {
		return err
	}
	// Deserialize `PluginRegistryOffset`:
	err = decoder.Decode(&obj.PluginRegistryOffset)
	if err != nil {
		return err
	}
	return nil
}

type PluginRegistryV1 struct {
	Key             Key
	Registry        []RegistryRecord
	ExternalPlugins []ExternalPluginRecord
}

var PluginRegistryV1Discriminator = [8]byte{169, 22, 246, 220, 229, 229, 164, 204}

func (obj PluginRegistryV1) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(PluginRegistryV1Discriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Key` param:
	err = encoder.Encode(obj.Key)
	if err != nil {
		return err
	}
	// Serialize `Registry` param:
	err = encoder.Encode(obj.Registry)
	if err != nil {
		return err
	}
	// Serialize `ExternalPlugins` param:
	err = encoder.Encode(obj.ExternalPlugins)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PluginRegistryV1) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(PluginRegistryV1Discriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[169 22 246 220 229 229 164 204]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Key`:
	err = decoder.Decode(&obj.Key)
	if err != nil {
		return err
	}
	// Deserialize `Registry`:
	err = decoder.Decode(&obj.Registry)
	if err != nil {
		return err
	}
	// Deserialize `ExternalPlugins`:
	err = decoder.Decode(&obj.ExternalPlugins)
	if err != nil {
		return err
	}
	return nil
}

type CollectionV1 struct {
	Key             Key
	UpdateAuthority ag_solanago.PublicKey
	Name            string
	Uri             string
	NumMinted       uint32
	CurrentSize     uint32
}

var CollectionV1Discriminator = [8]byte{241, 233, 202, 174, 195, 212, 229, 96}

func (obj CollectionV1) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(CollectionV1Discriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Key` param:
	err = encoder.Encode(obj.Key)
	if err != nil {
		return err
	}
	// Serialize `UpdateAuthority` param:
	err = encoder.Encode(obj.UpdateAuthority)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Uri` param:
	err = encoder.Encode(obj.Uri)
	if err != nil {
		return err
	}
	// Serialize `NumMinted` param:
	err = encoder.Encode(obj.NumMinted)
	if err != nil {
		return err
	}
	// Serialize `CurrentSize` param:
	err = encoder.Encode(obj.CurrentSize)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CollectionV1) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(CollectionV1Discriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[241 233 202 174 195 212 229 96]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Key`:
	err = decoder.Decode(&obj.Key)
	if err != nil {
		return err
	}
	// Deserialize `UpdateAuthority`:
	err = decoder.Decode(&obj.UpdateAuthority)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Uri`:
	err = decoder.Decode(&obj.Uri)
	if err != nil {
		return err
	}
	// Deserialize `NumMinted`:
	err = decoder.Decode(&obj.NumMinted)
	if err != nil {
		return err
	}
	// Deserialize `CurrentSize`:
	err = decoder.Decode(&obj.CurrentSize)
	if err != nil {
		return err
	}
	return nil
}
