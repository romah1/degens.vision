// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package mpl_core_program

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey = ag_solanago.MustPublicKeyFromBase58("CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d")

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "MplCoreProgram"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_CreateV1 = ag_binary.TypeID([8]byte{17, 118, 164, 242, 200, 153, 149, 125})

	Instruction_CreateCollectionV1 = ag_binary.TypeID([8]byte{71, 98, 203, 162, 193, 109, 187, 240})

	Instruction_AddPluginV1 = ag_binary.TypeID([8]byte{96, 21, 94, 226, 194, 53, 120, 3})

	Instruction_AddCollectionPluginV1 = ag_binary.TypeID([8]byte{23, 142, 170, 213, 93, 218, 179, 2})

	Instruction_RemovePluginV1 = ag_binary.TypeID([8]byte{170, 79, 202, 123, 81, 101, 168, 88})

	Instruction_RemoveCollectionPluginV1 = ag_binary.TypeID([8]byte{111, 193, 200, 188, 159, 126, 242, 52})

	Instruction_UpdatePluginV1 = ag_binary.TypeID([8]byte{173, 68, 48, 13, 255, 0, 118, 32})

	Instruction_UpdateCollectionPluginV1 = ag_binary.TypeID([8]byte{200, 16, 57, 151, 140, 146, 191, 23})

	Instruction_ApprovePluginAuthorityV1 = ag_binary.TypeID([8]byte{55, 66, 36, 240, 250, 73, 103, 36})

	Instruction_ApproveCollectionPluginAuthorityV1 = ag_binary.TypeID([8]byte{186, 99, 61, 189, 111, 24, 56, 10})

	Instruction_RevokePluginAuthorityV1 = ag_binary.TypeID([8]byte{251, 169, 42, 195, 104, 233, 196, 74})

	Instruction_RevokeCollectionPluginAuthorityV1 = ag_binary.TypeID([8]byte{120, 135, 41, 220, 94, 6, 194, 134})

	Instruction_BurnV1 = ag_binary.TypeID([8]byte{241, 99, 194, 76, 6, 126, 49, 154})

	Instruction_BurnCollectionV1 = ag_binary.TypeID([8]byte{117, 158, 166, 188, 230, 101, 134, 142})

	Instruction_TransferV1 = ag_binary.TypeID([8]byte{219, 95, 64, 10, 55, 137, 133, 109})

	Instruction_UpdateV1 = ag_binary.TypeID([8]byte{207, 157, 187, 63, 205, 149, 31, 165})

	Instruction_UpdateCollectionV1 = ag_binary.TypeID([8]byte{170, 80, 248, 176, 170, 142, 17, 149})

	Instruction_CompressV1 = ag_binary.TypeID([8]byte{233, 127, 103, 189, 71, 241, 127, 178})

	Instruction_DecompressV1 = ag_binary.TypeID([8]byte{54, 85, 76, 70, 228, 250, 164, 81})

	Instruction_Collect = ag_binary.TypeID([8]byte{208, 47, 194, 155, 17, 98, 82, 236})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_CreateV1:
		return "CreateV1"
	case Instruction_CreateCollectionV1:
		return "CreateCollectionV1"
	case Instruction_AddPluginV1:
		return "AddPluginV1"
	case Instruction_AddCollectionPluginV1:
		return "AddCollectionPluginV1"
	case Instruction_RemovePluginV1:
		return "RemovePluginV1"
	case Instruction_RemoveCollectionPluginV1:
		return "RemoveCollectionPluginV1"
	case Instruction_UpdatePluginV1:
		return "UpdatePluginV1"
	case Instruction_UpdateCollectionPluginV1:
		return "UpdateCollectionPluginV1"
	case Instruction_ApprovePluginAuthorityV1:
		return "ApprovePluginAuthorityV1"
	case Instruction_ApproveCollectionPluginAuthorityV1:
		return "ApproveCollectionPluginAuthorityV1"
	case Instruction_RevokePluginAuthorityV1:
		return "RevokePluginAuthorityV1"
	case Instruction_RevokeCollectionPluginAuthorityV1:
		return "RevokeCollectionPluginAuthorityV1"
	case Instruction_BurnV1:
		return "BurnV1"
	case Instruction_BurnCollectionV1:
		return "BurnCollectionV1"
	case Instruction_TransferV1:
		return "TransferV1"
	case Instruction_UpdateV1:
		return "UpdateV1"
	case Instruction_UpdateCollectionV1:
		return "UpdateCollectionV1"
	case Instruction_CompressV1:
		return "CompressV1"
	case Instruction_DecompressV1:
		return "DecompressV1"
	case Instruction_Collect:
		return "Collect"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"create_v1", (*CreateV1)(nil),
		},
		{
			"create_collection_v1", (*CreateCollectionV1)(nil),
		},
		{
			"add_plugin_v1", (*AddPluginV1)(nil),
		},
		{
			"add_collection_plugin_v1", (*AddCollectionPluginV1)(nil),
		},
		{
			"remove_plugin_v1", (*RemovePluginV1)(nil),
		},
		{
			"remove_collection_plugin_v1", (*RemoveCollectionPluginV1)(nil),
		},
		{
			"update_plugin_v1", (*UpdatePluginV1)(nil),
		},
		{
			"update_collection_plugin_v1", (*UpdateCollectionPluginV1)(nil),
		},
		{
			"approve_plugin_authority_v1", (*ApprovePluginAuthorityV1)(nil),
		},
		{
			"approve_collection_plugin_authority_v1", (*ApproveCollectionPluginAuthorityV1)(nil),
		},
		{
			"revoke_plugin_authority_v1", (*RevokePluginAuthorityV1)(nil),
		},
		{
			"revoke_collection_plugin_authority_v1", (*RevokeCollectionPluginAuthorityV1)(nil),
		},
		{
			"burn_v1", (*BurnV1)(nil),
		},
		{
			"burn_collection_v1", (*BurnCollectionV1)(nil),
		},
		{
			"transfer_v1", (*TransferV1)(nil),
		},
		{
			"update_v1", (*UpdateV1)(nil),
		},
		{
			"update_collection_v1", (*UpdateCollectionV1)(nil),
		},
		{
			"compress_v1", (*CompressV1)(nil),
		},
		{
			"decompress_v1", (*DecompressV1)(nil),
		},
		{
			"collect", (*Collect)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
