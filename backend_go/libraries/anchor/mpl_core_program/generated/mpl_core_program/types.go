// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package mpl_core_program

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type PluginAuthorityPair struct {
	Plugin    Plugin
	Authority *Authority `bin:"optional"`
}

func (obj PluginAuthorityPair) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Plugin` param:
	{
		tmp := pluginContainer{}
		switch realvalue := obj.Plugin.(type) {
		case *PluginRoyalties:
			tmp.Enum = 0
			tmp.Royalties = *realvalue
		case *PluginFreezeDelegate:
			tmp.Enum = 1
			tmp.FreezeDelegate = *realvalue
		case *PluginBurnDelegate:
			tmp.Enum = 2
			tmp.BurnDelegate = *realvalue
		case *PluginTransferDelegate:
			tmp.Enum = 3
			tmp.TransferDelegate = *realvalue
		case *PluginUpdateDelegate:
			tmp.Enum = 4
			tmp.UpdateDelegate = *realvalue
		case *PluginPermanentFreezeDelegate:
			tmp.Enum = 5
			tmp.PermanentFreezeDelegate = *realvalue
		case *PluginAttributes:
			tmp.Enum = 6
			tmp.Attributes = *realvalue
		case *PluginPermanentTransferDelegate:
			tmp.Enum = 7
			tmp.PermanentTransferDelegate = *realvalue
		case *PluginPermanentBurnDelegate:
			tmp.Enum = 8
			tmp.PermanentBurnDelegate = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	// Serialize `Authority` param (optional):
	{
		if obj.Authority == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Authority)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *PluginAuthorityPair) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Plugin`:
	{
		tmp := new(pluginContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.Plugin = &tmp.Royalties
		case 1:
			obj.Plugin = &tmp.FreezeDelegate
		case 2:
			obj.Plugin = &tmp.BurnDelegate
		case 3:
			obj.Plugin = &tmp.TransferDelegate
		case 4:
			obj.Plugin = &tmp.UpdateDelegate
		case 5:
			obj.Plugin = &tmp.PermanentFreezeDelegate
		case 6:
			obj.Plugin = &tmp.Attributes
		case 7:
			obj.Plugin = &tmp.PermanentTransferDelegate
		case 8:
			obj.Plugin = &tmp.PermanentBurnDelegate
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	// Deserialize `Authority` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Authority)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type Attribute struct {
	Key   string
	Value string
}

func (obj Attribute) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Key` param:
	err = encoder.Encode(obj.Key)
	if err != nil {
		return err
	}
	// Serialize `Value` param:
	err = encoder.Encode(obj.Value)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Attribute) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Key`:
	err = decoder.Decode(&obj.Key)
	if err != nil {
		return err
	}
	// Deserialize `Value`:
	err = decoder.Decode(&obj.Value)
	if err != nil {
		return err
	}
	return nil
}

type Attributes struct {
	AttributeList []Attribute
}

func (obj Attributes) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AttributeList` param:
	err = encoder.Encode(obj.AttributeList)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Attributes) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AttributeList`:
	err = decoder.Decode(&obj.AttributeList)
	if err != nil {
		return err
	}
	return nil
}

type BurnDelegate struct{}

func (obj BurnDelegate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *BurnDelegate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

type FreezeDelegate struct {
	Frozen bool
}

func (obj FreezeDelegate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Frozen` param:
	err = encoder.Encode(obj.Frozen)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FreezeDelegate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Frozen`:
	err = decoder.Decode(&obj.Frozen)
	if err != nil {
		return err
	}
	return nil
}

type PermanentBurnDelegate struct{}

func (obj PermanentBurnDelegate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *PermanentBurnDelegate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

type PermanentFreezeDelegate struct {
	Frozen bool
}

func (obj PermanentFreezeDelegate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Frozen` param:
	err = encoder.Encode(obj.Frozen)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PermanentFreezeDelegate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Frozen`:
	err = decoder.Decode(&obj.Frozen)
	if err != nil {
		return err
	}
	return nil
}

type PermanentTransferDelegate struct{}

func (obj PermanentTransferDelegate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *PermanentTransferDelegate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

type RegistryRecord struct {
	PluginType PluginType
	Authority  Authority
	Offset     uint64
}

func (obj RegistryRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PluginType` param:
	err = encoder.Encode(obj.PluginType)
	if err != nil {
		return err
	}
	// Serialize `Authority` param:
	{
		tmp := authorityContainer{}
		switch realvalue := obj.Authority.(type) {
		case *AuthorityNone:
			tmp.Enum = 0
			tmp.None = *realvalue
		case *AuthorityOwner:
			tmp.Enum = 1
			tmp.Owner = *realvalue
		case *AuthorityUpdateAuthority:
			tmp.Enum = 2
			tmp.UpdateAuthority = *realvalue
		case *AuthorityAddress:
			tmp.Enum = 3
			tmp.Address = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	// Serialize `Offset` param:
	err = encoder.Encode(obj.Offset)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RegistryRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PluginType`:
	err = decoder.Decode(&obj.PluginType)
	if err != nil {
		return err
	}
	// Deserialize `Authority`:
	{
		tmp := new(authorityContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.Authority = (*AuthorityNone)(&tmp.Enum)
		case 1:
			obj.Authority = (*AuthorityOwner)(&tmp.Enum)
		case 2:
			obj.Authority = (*AuthorityUpdateAuthority)(&tmp.Enum)
		case 3:
			obj.Authority = &tmp.Address
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	// Deserialize `Offset`:
	err = decoder.Decode(&obj.Offset)
	if err != nil {
		return err
	}
	return nil
}

type ExternalPluginRecord struct {
	Authority Authority
	Offset    uint64
}

func (obj ExternalPluginRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Authority` param:
	{
		tmp := authorityContainer{}
		switch realvalue := obj.Authority.(type) {
		case *AuthorityNone:
			tmp.Enum = 0
			tmp.None = *realvalue
		case *AuthorityOwner:
			tmp.Enum = 1
			tmp.Owner = *realvalue
		case *AuthorityUpdateAuthority:
			tmp.Enum = 2
			tmp.UpdateAuthority = *realvalue
		case *AuthorityAddress:
			tmp.Enum = 3
			tmp.Address = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	// Serialize `Offset` param:
	err = encoder.Encode(obj.Offset)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ExternalPluginRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Authority`:
	{
		tmp := new(authorityContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.Authority = (*AuthorityNone)(&tmp.Enum)
		case 1:
			obj.Authority = (*AuthorityOwner)(&tmp.Enum)
		case 2:
			obj.Authority = (*AuthorityUpdateAuthority)(&tmp.Enum)
		case 3:
			obj.Authority = &tmp.Address
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	// Deserialize `Offset`:
	err = decoder.Decode(&obj.Offset)
	if err != nil {
		return err
	}
	return nil
}

type Creator struct {
	Address    ag_solanago.PublicKey
	Percentage uint8
}

func (obj Creator) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Address` param:
	err = encoder.Encode(obj.Address)
	if err != nil {
		return err
	}
	// Serialize `Percentage` param:
	err = encoder.Encode(obj.Percentage)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Creator) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Address`:
	err = decoder.Decode(&obj.Address)
	if err != nil {
		return err
	}
	// Deserialize `Percentage`:
	err = decoder.Decode(&obj.Percentage)
	if err != nil {
		return err
	}
	return nil
}

type Royalties struct {
	BasisPoints uint16
	Creators    []Creator
	RuleSet     RuleSet
}

func (obj Royalties) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BasisPoints` param:
	err = encoder.Encode(obj.BasisPoints)
	if err != nil {
		return err
	}
	// Serialize `Creators` param:
	err = encoder.Encode(obj.Creators)
	if err != nil {
		return err
	}
	// Serialize `RuleSet` param:
	err = encoder.Encode(obj.RuleSet)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Royalties) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BasisPoints`:
	err = decoder.Decode(&obj.BasisPoints)
	if err != nil {
		return err
	}
	// Deserialize `Creators`:
	err = decoder.Decode(&obj.Creators)
	if err != nil {
		return err
	}
	// Deserialize `RuleSet`:
	err = decoder.Decode(&obj.RuleSet)
	if err != nil {
		return err
	}
	return nil
}

type TransferDelegate struct{}

func (obj TransferDelegate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *TransferDelegate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

type UpdateDelegate struct {
	AdditionalDelegates []ag_solanago.PublicKey
}

func (obj UpdateDelegate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AdditionalDelegates` param:
	err = encoder.Encode(obj.AdditionalDelegates)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UpdateDelegate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AdditionalDelegates`:
	err = decoder.Decode(&obj.AdditionalDelegates)
	if err != nil {
		return err
	}
	return nil
}

type AddPluginV1Args struct {
	Plugin        Plugin
	InitAuthority *Authority `bin:"optional"`
}

func (obj AddPluginV1Args) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Plugin` param:
	{
		tmp := pluginContainer{}
		switch realvalue := obj.Plugin.(type) {
		case *PluginRoyalties:
			tmp.Enum = 0
			tmp.Royalties = *realvalue
		case *PluginFreezeDelegate:
			tmp.Enum = 1
			tmp.FreezeDelegate = *realvalue
		case *PluginBurnDelegate:
			tmp.Enum = 2
			tmp.BurnDelegate = *realvalue
		case *PluginTransferDelegate:
			tmp.Enum = 3
			tmp.TransferDelegate = *realvalue
		case *PluginUpdateDelegate:
			tmp.Enum = 4
			tmp.UpdateDelegate = *realvalue
		case *PluginPermanentFreezeDelegate:
			tmp.Enum = 5
			tmp.PermanentFreezeDelegate = *realvalue
		case *PluginAttributes:
			tmp.Enum = 6
			tmp.Attributes = *realvalue
		case *PluginPermanentTransferDelegate:
			tmp.Enum = 7
			tmp.PermanentTransferDelegate = *realvalue
		case *PluginPermanentBurnDelegate:
			tmp.Enum = 8
			tmp.PermanentBurnDelegate = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	// Serialize `InitAuthority` param (optional):
	{
		if obj.InitAuthority == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.InitAuthority)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *AddPluginV1Args) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Plugin`:
	{
		tmp := new(pluginContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.Plugin = &tmp.Royalties
		case 1:
			obj.Plugin = &tmp.FreezeDelegate
		case 2:
			obj.Plugin = &tmp.BurnDelegate
		case 3:
			obj.Plugin = &tmp.TransferDelegate
		case 4:
			obj.Plugin = &tmp.UpdateDelegate
		case 5:
			obj.Plugin = &tmp.PermanentFreezeDelegate
		case 6:
			obj.Plugin = &tmp.Attributes
		case 7:
			obj.Plugin = &tmp.PermanentTransferDelegate
		case 8:
			obj.Plugin = &tmp.PermanentBurnDelegate
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	// Deserialize `InitAuthority` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.InitAuthority)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type AddCollectionPluginV1Args struct {
	Plugin        Plugin
	InitAuthority *Authority `bin:"optional"`
}

func (obj AddCollectionPluginV1Args) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Plugin` param:
	{
		tmp := pluginContainer{}
		switch realvalue := obj.Plugin.(type) {
		case *PluginRoyalties:
			tmp.Enum = 0
			tmp.Royalties = *realvalue
		case *PluginFreezeDelegate:
			tmp.Enum = 1
			tmp.FreezeDelegate = *realvalue
		case *PluginBurnDelegate:
			tmp.Enum = 2
			tmp.BurnDelegate = *realvalue
		case *PluginTransferDelegate:
			tmp.Enum = 3
			tmp.TransferDelegate = *realvalue
		case *PluginUpdateDelegate:
			tmp.Enum = 4
			tmp.UpdateDelegate = *realvalue
		case *PluginPermanentFreezeDelegate:
			tmp.Enum = 5
			tmp.PermanentFreezeDelegate = *realvalue
		case *PluginAttributes:
			tmp.Enum = 6
			tmp.Attributes = *realvalue
		case *PluginPermanentTransferDelegate:
			tmp.Enum = 7
			tmp.PermanentTransferDelegate = *realvalue
		case *PluginPermanentBurnDelegate:
			tmp.Enum = 8
			tmp.PermanentBurnDelegate = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	// Serialize `InitAuthority` param (optional):
	{
		if obj.InitAuthority == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.InitAuthority)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *AddCollectionPluginV1Args) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Plugin`:
	{
		tmp := new(pluginContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.Plugin = &tmp.Royalties
		case 1:
			obj.Plugin = &tmp.FreezeDelegate
		case 2:
			obj.Plugin = &tmp.BurnDelegate
		case 3:
			obj.Plugin = &tmp.TransferDelegate
		case 4:
			obj.Plugin = &tmp.UpdateDelegate
		case 5:
			obj.Plugin = &tmp.PermanentFreezeDelegate
		case 6:
			obj.Plugin = &tmp.Attributes
		case 7:
			obj.Plugin = &tmp.PermanentTransferDelegate
		case 8:
			obj.Plugin = &tmp.PermanentBurnDelegate
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	// Deserialize `InitAuthority` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.InitAuthority)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type ApprovePluginAuthorityV1Args struct {
	PluginType   PluginType
	NewAuthority Authority
}

func (obj ApprovePluginAuthorityV1Args) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PluginType` param:
	err = encoder.Encode(obj.PluginType)
	if err != nil {
		return err
	}
	// Serialize `NewAuthority` param:
	{
		tmp := authorityContainer{}
		switch realvalue := obj.NewAuthority.(type) {
		case *AuthorityNone:
			tmp.Enum = 0
			tmp.None = *realvalue
		case *AuthorityOwner:
			tmp.Enum = 1
			tmp.Owner = *realvalue
		case *AuthorityUpdateAuthority:
			tmp.Enum = 2
			tmp.UpdateAuthority = *realvalue
		case *AuthorityAddress:
			tmp.Enum = 3
			tmp.Address = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	return nil
}

func (obj *ApprovePluginAuthorityV1Args) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PluginType`:
	err = decoder.Decode(&obj.PluginType)
	if err != nil {
		return err
	}
	// Deserialize `NewAuthority`:
	{
		tmp := new(authorityContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.NewAuthority = (*AuthorityNone)(&tmp.Enum)
		case 1:
			obj.NewAuthority = (*AuthorityOwner)(&tmp.Enum)
		case 2:
			obj.NewAuthority = (*AuthorityUpdateAuthority)(&tmp.Enum)
		case 3:
			obj.NewAuthority = &tmp.Address
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	return nil
}

type ApproveCollectionPluginAuthorityV1Args struct {
	PluginType   PluginType
	NewAuthority Authority
}

func (obj ApproveCollectionPluginAuthorityV1Args) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PluginType` param:
	err = encoder.Encode(obj.PluginType)
	if err != nil {
		return err
	}
	// Serialize `NewAuthority` param:
	{
		tmp := authorityContainer{}
		switch realvalue := obj.NewAuthority.(type) {
		case *AuthorityNone:
			tmp.Enum = 0
			tmp.None = *realvalue
		case *AuthorityOwner:
			tmp.Enum = 1
			tmp.Owner = *realvalue
		case *AuthorityUpdateAuthority:
			tmp.Enum = 2
			tmp.UpdateAuthority = *realvalue
		case *AuthorityAddress:
			tmp.Enum = 3
			tmp.Address = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	return nil
}

func (obj *ApproveCollectionPluginAuthorityV1Args) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PluginType`:
	err = decoder.Decode(&obj.PluginType)
	if err != nil {
		return err
	}
	// Deserialize `NewAuthority`:
	{
		tmp := new(authorityContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.NewAuthority = (*AuthorityNone)(&tmp.Enum)
		case 1:
			obj.NewAuthority = (*AuthorityOwner)(&tmp.Enum)
		case 2:
			obj.NewAuthority = (*AuthorityUpdateAuthority)(&tmp.Enum)
		case 3:
			obj.NewAuthority = &tmp.Address
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	return nil
}

type BurnV1Args struct {
	CompressionProof *CompressionProof `bin:"optional"`
}

func (obj BurnV1Args) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `CompressionProof` param (optional):
	{
		if obj.CompressionProof == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.CompressionProof)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *BurnV1Args) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `CompressionProof` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.CompressionProof)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type BurnCollectionV1Args struct {
	CompressionProof *CompressionProof `bin:"optional"`
}

func (obj BurnCollectionV1Args) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `CompressionProof` param (optional):
	{
		if obj.CompressionProof == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.CompressionProof)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *BurnCollectionV1Args) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `CompressionProof` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.CompressionProof)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type CompressV1Args struct{}

func (obj CompressV1Args) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *CompressV1Args) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

type CreateV1Args struct {
	DataState DataState
	Name      string
	Uri       string
	Plugins   *[]PluginAuthorityPair `bin:"optional"`
}

func (obj CreateV1Args) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DataState` param:
	err = encoder.Encode(obj.DataState)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Uri` param:
	err = encoder.Encode(obj.Uri)
	if err != nil {
		return err
	}
	// Serialize `Plugins` param (optional):
	{
		if obj.Plugins == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Plugins)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *CreateV1Args) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DataState`:
	err = decoder.Decode(&obj.DataState)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Uri`:
	err = decoder.Decode(&obj.Uri)
	if err != nil {
		return err
	}
	// Deserialize `Plugins` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Plugins)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type CreateCollectionV1Args struct {
	Name    string
	Uri     string
	Plugins *[]PluginAuthorityPair `bin:"optional"`
}

func (obj CreateCollectionV1Args) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Uri` param:
	err = encoder.Encode(obj.Uri)
	if err != nil {
		return err
	}
	// Serialize `Plugins` param (optional):
	{
		if obj.Plugins == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Plugins)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *CreateCollectionV1Args) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Uri`:
	err = decoder.Decode(&obj.Uri)
	if err != nil {
		return err
	}
	// Deserialize `Plugins` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Plugins)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type DecompressV1Args struct {
	CompressionProof CompressionProof
}

func (obj DecompressV1Args) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `CompressionProof` param:
	err = encoder.Encode(obj.CompressionProof)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DecompressV1Args) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `CompressionProof`:
	err = decoder.Decode(&obj.CompressionProof)
	if err != nil {
		return err
	}
	return nil
}

type RemovePluginV1Args struct {
	PluginType PluginType
}

func (obj RemovePluginV1Args) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PluginType` param:
	err = encoder.Encode(obj.PluginType)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RemovePluginV1Args) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PluginType`:
	err = decoder.Decode(&obj.PluginType)
	if err != nil {
		return err
	}
	return nil
}

type RemoveCollectionPluginV1Args struct {
	PluginType PluginType
}

func (obj RemoveCollectionPluginV1Args) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PluginType` param:
	err = encoder.Encode(obj.PluginType)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RemoveCollectionPluginV1Args) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PluginType`:
	err = decoder.Decode(&obj.PluginType)
	if err != nil {
		return err
	}
	return nil
}

type RevokePluginAuthorityV1Args struct {
	PluginType PluginType
}

func (obj RevokePluginAuthorityV1Args) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PluginType` param:
	err = encoder.Encode(obj.PluginType)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RevokePluginAuthorityV1Args) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PluginType`:
	err = decoder.Decode(&obj.PluginType)
	if err != nil {
		return err
	}
	return nil
}

type RevokeCollectionPluginAuthorityV1Args struct {
	PluginType PluginType
}

func (obj RevokeCollectionPluginAuthorityV1Args) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PluginType` param:
	err = encoder.Encode(obj.PluginType)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RevokeCollectionPluginAuthorityV1Args) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PluginType`:
	err = decoder.Decode(&obj.PluginType)
	if err != nil {
		return err
	}
	return nil
}

type TransferV1Args struct {
	CompressionProof *CompressionProof `bin:"optional"`
}

func (obj TransferV1Args) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `CompressionProof` param (optional):
	{
		if obj.CompressionProof == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.CompressionProof)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *TransferV1Args) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `CompressionProof` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.CompressionProof)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type UpdateV1Args struct {
	NewName            *string          `bin:"optional"`
	NewUri             *string          `bin:"optional"`
	NewUpdateAuthority *UpdateAuthority `bin:"optional"`
}

func (obj UpdateV1Args) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NewName` param (optional):
	{
		if obj.NewName == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.NewName)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `NewUri` param (optional):
	{
		if obj.NewUri == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.NewUri)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `NewUpdateAuthority` param (optional):
	{
		if obj.NewUpdateAuthority == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.NewUpdateAuthority)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *UpdateV1Args) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NewName` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.NewName)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `NewUri` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.NewUri)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `NewUpdateAuthority` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.NewUpdateAuthority)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type UpdateCollectionV1Args struct {
	NewName *string `bin:"optional"`
	NewUri  *string `bin:"optional"`
}

func (obj UpdateCollectionV1Args) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NewName` param (optional):
	{
		if obj.NewName == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.NewName)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `NewUri` param (optional):
	{
		if obj.NewUri == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.NewUri)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *UpdateCollectionV1Args) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NewName` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.NewName)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `NewUri` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.NewUri)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type UpdatePluginV1Args struct {
	Plugin Plugin
}

func (obj UpdatePluginV1Args) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Plugin` param:
	{
		tmp := pluginContainer{}
		switch realvalue := obj.Plugin.(type) {
		case *PluginRoyalties:
			tmp.Enum = 0
			tmp.Royalties = *realvalue
		case *PluginFreezeDelegate:
			tmp.Enum = 1
			tmp.FreezeDelegate = *realvalue
		case *PluginBurnDelegate:
			tmp.Enum = 2
			tmp.BurnDelegate = *realvalue
		case *PluginTransferDelegate:
			tmp.Enum = 3
			tmp.TransferDelegate = *realvalue
		case *PluginUpdateDelegate:
			tmp.Enum = 4
			tmp.UpdateDelegate = *realvalue
		case *PluginPermanentFreezeDelegate:
			tmp.Enum = 5
			tmp.PermanentFreezeDelegate = *realvalue
		case *PluginAttributes:
			tmp.Enum = 6
			tmp.Attributes = *realvalue
		case *PluginPermanentTransferDelegate:
			tmp.Enum = 7
			tmp.PermanentTransferDelegate = *realvalue
		case *PluginPermanentBurnDelegate:
			tmp.Enum = 8
			tmp.PermanentBurnDelegate = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	return nil
}

func (obj *UpdatePluginV1Args) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Plugin`:
	{
		tmp := new(pluginContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.Plugin = &tmp.Royalties
		case 1:
			obj.Plugin = &tmp.FreezeDelegate
		case 2:
			obj.Plugin = &tmp.BurnDelegate
		case 3:
			obj.Plugin = &tmp.TransferDelegate
		case 4:
			obj.Plugin = &tmp.UpdateDelegate
		case 5:
			obj.Plugin = &tmp.PermanentFreezeDelegate
		case 6:
			obj.Plugin = &tmp.Attributes
		case 7:
			obj.Plugin = &tmp.PermanentTransferDelegate
		case 8:
			obj.Plugin = &tmp.PermanentBurnDelegate
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	return nil
}

type UpdateCollectionPluginV1Args struct {
	Plugin Plugin
}

func (obj UpdateCollectionPluginV1Args) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Plugin` param:
	{
		tmp := pluginContainer{}
		switch realvalue := obj.Plugin.(type) {
		case *PluginRoyalties:
			tmp.Enum = 0
			tmp.Royalties = *realvalue
		case *PluginFreezeDelegate:
			tmp.Enum = 1
			tmp.FreezeDelegate = *realvalue
		case *PluginBurnDelegate:
			tmp.Enum = 2
			tmp.BurnDelegate = *realvalue
		case *PluginTransferDelegate:
			tmp.Enum = 3
			tmp.TransferDelegate = *realvalue
		case *PluginUpdateDelegate:
			tmp.Enum = 4
			tmp.UpdateDelegate = *realvalue
		case *PluginPermanentFreezeDelegate:
			tmp.Enum = 5
			tmp.PermanentFreezeDelegate = *realvalue
		case *PluginAttributes:
			tmp.Enum = 6
			tmp.Attributes = *realvalue
		case *PluginPermanentTransferDelegate:
			tmp.Enum = 7
			tmp.PermanentTransferDelegate = *realvalue
		case *PluginPermanentBurnDelegate:
			tmp.Enum = 8
			tmp.PermanentBurnDelegate = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	return nil
}

func (obj *UpdateCollectionPluginV1Args) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Plugin`:
	{
		tmp := new(pluginContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.Plugin = &tmp.Royalties
		case 1:
			obj.Plugin = &tmp.FreezeDelegate
		case 2:
			obj.Plugin = &tmp.BurnDelegate
		case 3:
			obj.Plugin = &tmp.TransferDelegate
		case 4:
			obj.Plugin = &tmp.UpdateDelegate
		case 5:
			obj.Plugin = &tmp.PermanentFreezeDelegate
		case 6:
			obj.Plugin = &tmp.Attributes
		case 7:
			obj.Plugin = &tmp.PermanentTransferDelegate
		case 8:
			obj.Plugin = &tmp.PermanentBurnDelegate
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	return nil
}

type CompressionProof struct {
	Owner           ag_solanago.PublicKey
	UpdateAuthority UpdateAuthority
	Name            string
	Uri             string
	Seq             uint64
	Plugins         []HashablePluginSchema
}

func (obj CompressionProof) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `UpdateAuthority` param:
	{
		tmp := updateAuthorityContainer{}
		switch realvalue := obj.UpdateAuthority.(type) {
		case *UpdateAuthorityNone:
			tmp.Enum = 0
			tmp.None = *realvalue
		case *UpdateAuthorityAddress:
			tmp.Enum = 1
			tmp.Address = *realvalue
		case *UpdateAuthorityCollection:
			tmp.Enum = 2
			tmp.Collection = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Uri` param:
	err = encoder.Encode(obj.Uri)
	if err != nil {
		return err
	}
	// Serialize `Seq` param:
	err = encoder.Encode(obj.Seq)
	if err != nil {
		return err
	}
	// Serialize `Plugins` param:
	err = encoder.Encode(obj.Plugins)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CompressionProof) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `UpdateAuthority`:
	{
		tmp := new(updateAuthorityContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.UpdateAuthority = (*UpdateAuthorityNone)(&tmp.Enum)
		case 1:
			obj.UpdateAuthority = &tmp.Address
		case 2:
			obj.UpdateAuthority = &tmp.Collection
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Uri`:
	err = decoder.Decode(&obj.Uri)
	if err != nil {
		return err
	}
	// Deserialize `Seq`:
	err = decoder.Decode(&obj.Seq)
	if err != nil {
		return err
	}
	// Deserialize `Plugins`:
	err = decoder.Decode(&obj.Plugins)
	if err != nil {
		return err
	}
	return nil
}

type HashablePluginSchema struct {
	Index     uint64
	Authority Authority
	Plugin    Plugin
}

func (obj HashablePluginSchema) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `Authority` param:
	{
		tmp := authorityContainer{}
		switch realvalue := obj.Authority.(type) {
		case *AuthorityNone:
			tmp.Enum = 0
			tmp.None = *realvalue
		case *AuthorityOwner:
			tmp.Enum = 1
			tmp.Owner = *realvalue
		case *AuthorityUpdateAuthority:
			tmp.Enum = 2
			tmp.UpdateAuthority = *realvalue
		case *AuthorityAddress:
			tmp.Enum = 3
			tmp.Address = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	// Serialize `Plugin` param:
	{
		tmp := pluginContainer{}
		switch realvalue := obj.Plugin.(type) {
		case *PluginRoyalties:
			tmp.Enum = 0
			tmp.Royalties = *realvalue
		case *PluginFreezeDelegate:
			tmp.Enum = 1
			tmp.FreezeDelegate = *realvalue
		case *PluginBurnDelegate:
			tmp.Enum = 2
			tmp.BurnDelegate = *realvalue
		case *PluginTransferDelegate:
			tmp.Enum = 3
			tmp.TransferDelegate = *realvalue
		case *PluginUpdateDelegate:
			tmp.Enum = 4
			tmp.UpdateDelegate = *realvalue
		case *PluginPermanentFreezeDelegate:
			tmp.Enum = 5
			tmp.PermanentFreezeDelegate = *realvalue
		case *PluginAttributes:
			tmp.Enum = 6
			tmp.Attributes = *realvalue
		case *PluginPermanentTransferDelegate:
			tmp.Enum = 7
			tmp.PermanentTransferDelegate = *realvalue
		case *PluginPermanentBurnDelegate:
			tmp.Enum = 8
			tmp.PermanentBurnDelegate = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	return nil
}

func (obj *HashablePluginSchema) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `Authority`:
	{
		tmp := new(authorityContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.Authority = (*AuthorityNone)(&tmp.Enum)
		case 1:
			obj.Authority = (*AuthorityOwner)(&tmp.Enum)
		case 2:
			obj.Authority = (*AuthorityUpdateAuthority)(&tmp.Enum)
		case 3:
			obj.Authority = &tmp.Address
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	// Deserialize `Plugin`:
	{
		tmp := new(pluginContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.Plugin = &tmp.Royalties
		case 1:
			obj.Plugin = &tmp.FreezeDelegate
		case 2:
			obj.Plugin = &tmp.BurnDelegate
		case 3:
			obj.Plugin = &tmp.TransferDelegate
		case 4:
			obj.Plugin = &tmp.UpdateDelegate
		case 5:
			obj.Plugin = &tmp.PermanentFreezeDelegate
		case 6:
			obj.Plugin = &tmp.Attributes
		case 7:
			obj.Plugin = &tmp.PermanentTransferDelegate
		case 8:
			obj.Plugin = &tmp.PermanentBurnDelegate
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	return nil
}

type HashedAssetSchema struct {
	AssetHash    [32]uint8
	PluginHashes [][32]uint8
}

func (obj HashedAssetSchema) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AssetHash` param:
	err = encoder.Encode(obj.AssetHash)
	if err != nil {
		return err
	}
	// Serialize `PluginHashes` param:
	err = encoder.Encode(obj.PluginHashes)
	if err != nil {
		return err
	}
	return nil
}

func (obj *HashedAssetSchema) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AssetHash`:
	err = decoder.Decode(&obj.AssetHash)
	if err != nil {
		return err
	}
	// Deserialize `PluginHashes`:
	err = decoder.Decode(&obj.PluginHashes)
	if err != nil {
		return err
	}
	return nil
}

type Plugin interface {
	isPlugin()
}

type pluginContainer struct {
	Enum                      ag_binary.BorshEnum `borsh_enum:"true"`
	Royalties                 PluginRoyalties
	FreezeDelegate            PluginFreezeDelegate
	BurnDelegate              PluginBurnDelegate
	TransferDelegate          PluginTransferDelegate
	UpdateDelegate            PluginUpdateDelegate
	PermanentFreezeDelegate   PluginPermanentFreezeDelegate
	Attributes                PluginAttributes
	PermanentTransferDelegate PluginPermanentTransferDelegate
	PermanentBurnDelegate     PluginPermanentBurnDelegate
}

type PluginRoyalties struct {
	Royalties Royalties
}

func (obj PluginRoyalties) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Royalties` param:
	err = encoder.Encode(obj.Royalties)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PluginRoyalties) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Royalties`:
	err = decoder.Decode(&obj.Royalties)
	if err != nil {
		return err
	}
	return nil
}

func (_ *PluginRoyalties) isPlugin() {}

type PluginFreezeDelegate struct {
	FreezeDelegate FreezeDelegate
}

func (obj PluginFreezeDelegate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FreezeDelegate` param:
	err = encoder.Encode(obj.FreezeDelegate)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PluginFreezeDelegate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FreezeDelegate`:
	err = decoder.Decode(&obj.FreezeDelegate)
	if err != nil {
		return err
	}
	return nil
}

func (_ *PluginFreezeDelegate) isPlugin() {}

type PluginBurnDelegate struct {
	BurnDelegate BurnDelegate
}

func (obj PluginBurnDelegate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BurnDelegate` param:
	err = encoder.Encode(obj.BurnDelegate)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PluginBurnDelegate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BurnDelegate`:
	err = decoder.Decode(&obj.BurnDelegate)
	if err != nil {
		return err
	}
	return nil
}

func (_ *PluginBurnDelegate) isPlugin() {}

type PluginTransferDelegate struct {
	TransferDelegate TransferDelegate
}

func (obj PluginTransferDelegate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TransferDelegate` param:
	err = encoder.Encode(obj.TransferDelegate)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PluginTransferDelegate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TransferDelegate`:
	err = decoder.Decode(&obj.TransferDelegate)
	if err != nil {
		return err
	}
	return nil
}

func (_ *PluginTransferDelegate) isPlugin() {}

type PluginUpdateDelegate struct {
	UpdateDelegate UpdateDelegate
}

func (obj PluginUpdateDelegate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `UpdateDelegate` param:
	err = encoder.Encode(obj.UpdateDelegate)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PluginUpdateDelegate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `UpdateDelegate`:
	err = decoder.Decode(&obj.UpdateDelegate)
	if err != nil {
		return err
	}
	return nil
}

func (_ *PluginUpdateDelegate) isPlugin() {}

type PluginPermanentFreezeDelegate struct {
	PermanentFreezeDelegate PermanentFreezeDelegate
}

func (obj PluginPermanentFreezeDelegate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PermanentFreezeDelegate` param:
	err = encoder.Encode(obj.PermanentFreezeDelegate)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PluginPermanentFreezeDelegate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PermanentFreezeDelegate`:
	err = decoder.Decode(&obj.PermanentFreezeDelegate)
	if err != nil {
		return err
	}
	return nil
}

func (_ *PluginPermanentFreezeDelegate) isPlugin() {}

type PluginAttributes struct {
	Attributes Attributes
}

func (obj PluginAttributes) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Attributes` param:
	err = encoder.Encode(obj.Attributes)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PluginAttributes) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Attributes`:
	err = decoder.Decode(&obj.Attributes)
	if err != nil {
		return err
	}
	return nil
}

func (_ *PluginAttributes) isPlugin() {}

type PluginPermanentTransferDelegate struct {
	PermanentTransferDelegate PermanentTransferDelegate
}

func (obj PluginPermanentTransferDelegate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PermanentTransferDelegate` param:
	err = encoder.Encode(obj.PermanentTransferDelegate)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PluginPermanentTransferDelegate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PermanentTransferDelegate`:
	err = decoder.Decode(&obj.PermanentTransferDelegate)
	if err != nil {
		return err
	}
	return nil
}

func (_ *PluginPermanentTransferDelegate) isPlugin() {}

type PluginPermanentBurnDelegate struct {
	PermanentBurnDelegate PermanentBurnDelegate
}

func (obj PluginPermanentBurnDelegate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PermanentBurnDelegate` param:
	err = encoder.Encode(obj.PermanentBurnDelegate)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PluginPermanentBurnDelegate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PermanentBurnDelegate`:
	err = decoder.Decode(&obj.PermanentBurnDelegate)
	if err != nil {
		return err
	}
	return nil
}

func (_ *PluginPermanentBurnDelegate) isPlugin() {}

type PluginType ag_binary.BorshEnum

const (
	PluginTypeRoyalties PluginType = iota
	PluginTypeFreezeDelegate
	PluginTypeBurnDelegate
	PluginTypeTransferDelegate
	PluginTypeUpdateDelegate
	PluginTypePermanentFreezeDelegate
	PluginTypeAttributes
	PluginTypePermanentTransferDelegate
	PluginTypePermanentBurnDelegate
)

func (value PluginType) String() string {
	switch value {
	case PluginTypeRoyalties:
		return "Royalties"
	case PluginTypeFreezeDelegate:
		return "FreezeDelegate"
	case PluginTypeBurnDelegate:
		return "BurnDelegate"
	case PluginTypeTransferDelegate:
		return "TransferDelegate"
	case PluginTypeUpdateDelegate:
		return "UpdateDelegate"
	case PluginTypePermanentFreezeDelegate:
		return "PermanentFreezeDelegate"
	case PluginTypeAttributes:
		return "Attributes"
	case PluginTypePermanentTransferDelegate:
		return "PermanentTransferDelegate"
	case PluginTypePermanentBurnDelegate:
		return "PermanentBurnDelegate"
	default:
		return ""
	}
}

type RuleSet ag_binary.BorshEnum

const (
	RuleSetNone RuleSet = iota
)

func (value RuleSet) String() string {
	switch value {
	case RuleSetNone:
		return "None"
	default:
		return ""
	}
}

type DataState ag_binary.BorshEnum

const (
	DataStateAccountState DataState = iota
	DataStateLedgerState
)

func (value DataState) String() string {
	switch value {
	case DataStateAccountState:
		return "AccountState"
	case DataStateLedgerState:
		return "LedgerState"
	default:
		return ""
	}
}

type Authority interface {
	isAuthority()
}

type authorityContainer struct {
	Enum            ag_binary.BorshEnum `borsh_enum:"true"`
	None            AuthorityNone
	Owner           AuthorityOwner
	UpdateAuthority AuthorityUpdateAuthority
	Address         AuthorityAddress
}

type AuthorityNone uint8

func (obj AuthorityNone) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *AuthorityNone) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *AuthorityNone) isAuthority() {}

type AuthorityOwner uint8

func (obj AuthorityOwner) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *AuthorityOwner) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *AuthorityOwner) isAuthority() {}

type AuthorityUpdateAuthority uint8

func (obj AuthorityUpdateAuthority) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *AuthorityUpdateAuthority) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *AuthorityUpdateAuthority) isAuthority() {}

type AuthorityAddress struct {
	Address ag_solanago.PublicKey
}

func (obj AuthorityAddress) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Address` param:
	err = encoder.Encode(obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AuthorityAddress) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Address`:
	err = decoder.Decode(&obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (_ *AuthorityAddress) isAuthority() {}

type ExtraAccounts interface {
	isExtraAccounts()
}

type extraAccountsContainer struct {
	Enum    ag_binary.BorshEnum `borsh_enum:"true"`
	None    ExtraAccountsNone
	SplHook ExtraAccountsSplHook
	MplHook ExtraAccountsMplHook
}

type ExtraAccountsNone uint8

func (obj ExtraAccountsNone) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *ExtraAccountsNone) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *ExtraAccountsNone) isExtraAccounts() {}

type ExtraAccountsSplHook struct {
	ExtraAccountMetas ag_solanago.PublicKey
}

func (obj ExtraAccountsSplHook) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ExtraAccountMetas` param:
	err = encoder.Encode(obj.ExtraAccountMetas)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ExtraAccountsSplHook) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ExtraAccountMetas`:
	err = decoder.Decode(&obj.ExtraAccountMetas)
	if err != nil {
		return err
	}
	return nil
}

func (_ *ExtraAccountsSplHook) isExtraAccounts() {}

type ExtraAccountsMplHook struct {
	MintPda       *ag_solanago.PublicKey `bin:"optional"`
	CollectionPda *ag_solanago.PublicKey `bin:"optional"`
	OwnerPda      *ag_solanago.PublicKey `bin:"optional"`
}

func (obj ExtraAccountsMplHook) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MintPda` param (optional):
	{
		if obj.MintPda == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MintPda)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `CollectionPda` param (optional):
	{
		if obj.CollectionPda == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.CollectionPda)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `OwnerPda` param (optional):
	{
		if obj.OwnerPda == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.OwnerPda)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *ExtraAccountsMplHook) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MintPda` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MintPda)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `CollectionPda` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.CollectionPda)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `OwnerPda` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.OwnerPda)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (_ *ExtraAccountsMplHook) isExtraAccounts() {}

type Key ag_binary.BorshEnum

const (
	KeyUninitialized Key = iota
	KeyAssetV1
	KeyHashedAssetV1
	KeyPluginHeaderV1
	KeyPluginRegistryV1
	KeyCollectionV1
)

func (value Key) String() string {
	switch value {
	case KeyUninitialized:
		return "Uninitialized"
	case KeyAssetV1:
		return "AssetV1"
	case KeyHashedAssetV1:
		return "HashedAssetV1"
	case KeyPluginHeaderV1:
		return "PluginHeaderV1"
	case KeyPluginRegistryV1:
		return "PluginRegistryV1"
	case KeyCollectionV1:
		return "CollectionV1"
	default:
		return ""
	}
}

type UpdateAuthority interface {
	isUpdateAuthority()
}

type updateAuthorityContainer struct {
	Enum       ag_binary.BorshEnum `borsh_enum:"true"`
	None       UpdateAuthorityNone
	Address    UpdateAuthorityAddress
	Collection UpdateAuthorityCollection
}

type UpdateAuthorityNone uint8

func (obj UpdateAuthorityNone) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *UpdateAuthorityNone) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *UpdateAuthorityNone) isUpdateAuthority() {}

type UpdateAuthorityAddress struct {
	Address ag_solanago.PublicKey
}

func (obj UpdateAuthorityAddress) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Address` param:
	err = encoder.Encode(obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UpdateAuthorityAddress) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Address`:
	err = decoder.Decode(&obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (_ *UpdateAuthorityAddress) isUpdateAuthority() {}

type UpdateAuthorityCollection struct {
	Address ag_solanago.PublicKey
}

func (obj UpdateAuthorityCollection) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Address` param:
	err = encoder.Encode(obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UpdateAuthorityCollection) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Address`:
	err = decoder.Decode(&obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (_ *UpdateAuthorityCollection) isUpdateAuthority() {}
