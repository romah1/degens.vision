// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package mpl_core_program

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Collect is the `Collect` instruction.
type Collect struct {

	// [0] = [WRITE] recipient1
	// ··········· The address of the recipient 1
	//
	// [1] = [WRITE] recipient2
	// ··········· The address of the recipient 2
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCollectInstructionBuilder creates a new `Collect` instruction builder.
func NewCollectInstructionBuilder() *Collect {
	nd := &Collect{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetRecipient1Account sets the "recipient1" account.
// The address of the recipient 1
func (inst *Collect) SetRecipient1Account(recipient1 ag_solanago.PublicKey) *Collect {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(recipient1).WRITE()
	return inst
}

// GetRecipient1Account gets the "recipient1" account.
// The address of the recipient 1
func (inst *Collect) GetRecipient1Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetRecipient2Account sets the "recipient2" account.
// The address of the recipient 2
func (inst *Collect) SetRecipient2Account(recipient2 ag_solanago.PublicKey) *Collect {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(recipient2).WRITE()
	return inst
}

// GetRecipient2Account gets the "recipient2" account.
// The address of the recipient 2
func (inst *Collect) GetRecipient2Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst Collect) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Collect,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Collect) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Collect) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Recipient1 is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Recipient2 is not set")
		}
	}
	return nil
}

func (inst *Collect) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Collect")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("recipient1", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("recipient2", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj Collect) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *Collect) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewCollectInstruction declares a new Collect instruction with the provided parameters and accounts.
func NewCollectInstruction(
	// Accounts:
	recipient1 ag_solanago.PublicKey,
	recipient2 ag_solanago.PublicKey) *Collect {
	return NewCollectInstructionBuilder().
		SetRecipient1Account(recipient1).
		SetRecipient2Account(recipient2)
}
