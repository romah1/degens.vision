// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package candy_guard

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type FreezeEscrow struct {
	CandyGuard    ag_solanago.PublicKey
	CandyMachine  ag_solanago.PublicKey
	FrozenCount   uint64
	FirstMintTime *int64 `bin:"optional"`
	FreezePeriod  int64
	Destination   ag_solanago.PublicKey
	Authority     ag_solanago.PublicKey
}

var FreezeEscrowDiscriminator = [8]byte{227, 186, 40, 152, 7, 174, 131, 184}

func (obj FreezeEscrow) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(FreezeEscrowDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `CandyGuard` param:
	err = encoder.Encode(obj.CandyGuard)
	if err != nil {
		return err
	}
	// Serialize `CandyMachine` param:
	err = encoder.Encode(obj.CandyMachine)
	if err != nil {
		return err
	}
	// Serialize `FrozenCount` param:
	err = encoder.Encode(obj.FrozenCount)
	if err != nil {
		return err
	}
	// Serialize `FirstMintTime` param (optional):
	{
		if obj.FirstMintTime == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.FirstMintTime)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `FreezePeriod` param:
	err = encoder.Encode(obj.FreezePeriod)
	if err != nil {
		return err
	}
	// Serialize `Destination` param:
	err = encoder.Encode(obj.Destination)
	if err != nil {
		return err
	}
	// Serialize `Authority` param:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FreezeEscrow) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(FreezeEscrowDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[227 186 40 152 7 174 131 184]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `CandyGuard`:
	err = decoder.Decode(&obj.CandyGuard)
	if err != nil {
		return err
	}
	// Deserialize `CandyMachine`:
	err = decoder.Decode(&obj.CandyMachine)
	if err != nil {
		return err
	}
	// Deserialize `FrozenCount`:
	err = decoder.Decode(&obj.FrozenCount)
	if err != nil {
		return err
	}
	// Deserialize `FirstMintTime` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.FirstMintTime)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `FreezePeriod`:
	err = decoder.Decode(&obj.FreezePeriod)
	if err != nil {
		return err
	}
	// Deserialize `Destination`:
	err = decoder.Decode(&obj.Destination)
	if err != nil {
		return err
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return err
	}
	return nil
}

type CandyGuard struct {
	Base      ag_solanago.PublicKey
	Bump      uint8
	Authority ag_solanago.PublicKey
}

var CandyGuardDiscriminator = [8]byte{44, 207, 199, 184, 112, 103, 34, 181}

func (obj CandyGuard) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(CandyGuardDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Base` param:
	err = encoder.Encode(obj.Base)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Authority` param:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CandyGuard) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(CandyGuardDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[44 207 199 184 112 103 34 181]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Base`:
	err = decoder.Decode(&obj.Base)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return err
	}
	return nil
}
