// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package candy_guard

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// MintV2 is the `mintV2` instruction.
type MintV2 struct {
	MintArgs *[]byte
	Label    *string `bin:"optional"`

	// [0] = [] candyGuard
	//
	// [1] = [] candyMachineProgram
	//
	// [2] = [WRITE] candyMachine
	//
	// [3] = [WRITE] candyMachineAuthorityPda
	//
	// [4] = [WRITE, SIGNER] payer
	//
	// [5] = [WRITE, SIGNER] minter
	//
	// [6] = [WRITE] nftMint
	//
	// [7] = [SIGNER] nftMintAuthority
	//
	// [8] = [WRITE] nftMetadata
	//
	// [9] = [WRITE] nftMasterEdition
	//
	// [10] = [WRITE] token
	//
	// [11] = [WRITE] tokenRecord
	//
	// [12] = [] collectionDelegateRecord
	//
	// [13] = [] collectionMint
	//
	// [14] = [WRITE] collectionMetadata
	//
	// [15] = [] collectionMasterEdition
	//
	// [16] = [] collectionUpdateAuthority
	//
	// [17] = [] tokenMetadataProgram
	//
	// [18] = [] splTokenProgram
	//
	// [19] = [] splAtaProgram
	//
	// [20] = [] systemProgram
	//
	// [21] = [] sysvarInstructions
	//
	// [22] = [] recentSlothashes
	//
	// [23] = [] authorizationRulesProgram
	//
	// [24] = [] authorizationRules
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMintV2InstructionBuilder creates a new `MintV2` instruction builder.
func NewMintV2InstructionBuilder() *MintV2 {
	nd := &MintV2{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 25),
	}
	return nd
}

// SetMintArgs sets the "mintArgs" parameter.
func (inst *MintV2) SetMintArgs(mintArgs []byte) *MintV2 {
	inst.MintArgs = &mintArgs
	return inst
}

// SetLabel sets the "label" parameter.
func (inst *MintV2) SetLabel(label string) *MintV2 {
	inst.Label = &label
	return inst
}

// SetCandyGuardAccount sets the "candyGuard" account.
func (inst *MintV2) SetCandyGuardAccount(candyGuard ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(candyGuard)
	return inst
}

// GetCandyGuardAccount gets the "candyGuard" account.
func (inst *MintV2) GetCandyGuardAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetCandyMachineProgramAccount sets the "candyMachineProgram" account.
func (inst *MintV2) SetCandyMachineProgramAccount(candyMachineProgram ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(candyMachineProgram)
	return inst
}

// GetCandyMachineProgramAccount gets the "candyMachineProgram" account.
func (inst *MintV2) GetCandyMachineProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetCandyMachineAccount sets the "candyMachine" account.
func (inst *MintV2) SetCandyMachineAccount(candyMachine ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(candyMachine).WRITE()
	return inst
}

// GetCandyMachineAccount gets the "candyMachine" account.
func (inst *MintV2) GetCandyMachineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetCandyMachineAuthorityPdaAccount sets the "candyMachineAuthorityPda" account.
func (inst *MintV2) SetCandyMachineAuthorityPdaAccount(candyMachineAuthorityPda ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(candyMachineAuthorityPda).WRITE()
	return inst
}

// GetCandyMachineAuthorityPdaAccount gets the "candyMachineAuthorityPda" account.
func (inst *MintV2) GetCandyMachineAuthorityPdaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPayerAccount sets the "payer" account.
func (inst *MintV2) SetPayerAccount(payer ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *MintV2) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetMinterAccount sets the "minter" account.
func (inst *MintV2) SetMinterAccount(minter ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(minter).WRITE().SIGNER()
	return inst
}

// GetMinterAccount gets the "minter" account.
func (inst *MintV2) GetMinterAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetNftMintAccount sets the "nftMint" account.
func (inst *MintV2) SetNftMintAccount(nftMint ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(nftMint).WRITE()
	return inst
}

// GetNftMintAccount gets the "nftMint" account.
func (inst *MintV2) GetNftMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetNftMintAuthorityAccount sets the "nftMintAuthority" account.
func (inst *MintV2) SetNftMintAuthorityAccount(nftMintAuthority ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(nftMintAuthority).SIGNER()
	return inst
}

// GetNftMintAuthorityAccount gets the "nftMintAuthority" account.
func (inst *MintV2) GetNftMintAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetNftMetadataAccount sets the "nftMetadata" account.
func (inst *MintV2) SetNftMetadataAccount(nftMetadata ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(nftMetadata).WRITE()
	return inst
}

// GetNftMetadataAccount gets the "nftMetadata" account.
func (inst *MintV2) GetNftMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetNftMasterEditionAccount sets the "nftMasterEdition" account.
func (inst *MintV2) SetNftMasterEditionAccount(nftMasterEdition ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(nftMasterEdition).WRITE()
	return inst
}

// GetNftMasterEditionAccount gets the "nftMasterEdition" account.
func (inst *MintV2) GetNftMasterEditionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenAccount sets the "token" account.
func (inst *MintV2) SetTokenAccount(token ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(token).WRITE()
	return inst
}

// GetTokenAccount gets the "token" account.
func (inst *MintV2) GetTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenRecordAccount sets the "tokenRecord" account.
func (inst *MintV2) SetTokenRecordAccount(tokenRecord ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenRecord).WRITE()
	return inst
}

// GetTokenRecordAccount gets the "tokenRecord" account.
func (inst *MintV2) GetTokenRecordAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetCollectionDelegateRecordAccount sets the "collectionDelegateRecord" account.
func (inst *MintV2) SetCollectionDelegateRecordAccount(collectionDelegateRecord ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(collectionDelegateRecord)
	return inst
}

// GetCollectionDelegateRecordAccount gets the "collectionDelegateRecord" account.
func (inst *MintV2) GetCollectionDelegateRecordAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetCollectionMintAccount sets the "collectionMint" account.
func (inst *MintV2) SetCollectionMintAccount(collectionMint ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(collectionMint)
	return inst
}

// GetCollectionMintAccount gets the "collectionMint" account.
func (inst *MintV2) GetCollectionMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetCollectionMetadataAccount sets the "collectionMetadata" account.
func (inst *MintV2) SetCollectionMetadataAccount(collectionMetadata ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(collectionMetadata).WRITE()
	return inst
}

// GetCollectionMetadataAccount gets the "collectionMetadata" account.
func (inst *MintV2) GetCollectionMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetCollectionMasterEditionAccount sets the "collectionMasterEdition" account.
func (inst *MintV2) SetCollectionMasterEditionAccount(collectionMasterEdition ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(collectionMasterEdition)
	return inst
}

// GetCollectionMasterEditionAccount gets the "collectionMasterEdition" account.
func (inst *MintV2) GetCollectionMasterEditionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetCollectionUpdateAuthorityAccount sets the "collectionUpdateAuthority" account.
func (inst *MintV2) SetCollectionUpdateAuthorityAccount(collectionUpdateAuthority ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(collectionUpdateAuthority)
	return inst
}

// GetCollectionUpdateAuthorityAccount gets the "collectionUpdateAuthority" account.
func (inst *MintV2) GetCollectionUpdateAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

// SetTokenMetadataProgramAccount sets the "tokenMetadataProgram" account.
func (inst *MintV2) SetTokenMetadataProgramAccount(tokenMetadataProgram ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(tokenMetadataProgram)
	return inst
}

// GetTokenMetadataProgramAccount gets the "tokenMetadataProgram" account.
func (inst *MintV2) GetTokenMetadataProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(17)
}

// SetSplTokenProgramAccount sets the "splTokenProgram" account.
func (inst *MintV2) SetSplTokenProgramAccount(splTokenProgram ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[18] = ag_solanago.Meta(splTokenProgram)
	return inst
}

// GetSplTokenProgramAccount gets the "splTokenProgram" account.
func (inst *MintV2) GetSplTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(18)
}

// SetSplAtaProgramAccount sets the "splAtaProgram" account.
func (inst *MintV2) SetSplAtaProgramAccount(splAtaProgram ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[19] = ag_solanago.Meta(splAtaProgram)
	return inst
}

// GetSplAtaProgramAccount gets the "splAtaProgram" account.
func (inst *MintV2) GetSplAtaProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(19)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *MintV2) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[20] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *MintV2) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(20)
}

// SetSysvarInstructionsAccount sets the "sysvarInstructions" account.
func (inst *MintV2) SetSysvarInstructionsAccount(sysvarInstructions ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[21] = ag_solanago.Meta(sysvarInstructions)
	return inst
}

// GetSysvarInstructionsAccount gets the "sysvarInstructions" account.
func (inst *MintV2) GetSysvarInstructionsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(21)
}

// SetRecentSlothashesAccount sets the "recentSlothashes" account.
func (inst *MintV2) SetRecentSlothashesAccount(recentSlothashes ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[22] = ag_solanago.Meta(recentSlothashes)
	return inst
}

// GetRecentSlothashesAccount gets the "recentSlothashes" account.
func (inst *MintV2) GetRecentSlothashesAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(22)
}

// SetAuthorizationRulesProgramAccount sets the "authorizationRulesProgram" account.
func (inst *MintV2) SetAuthorizationRulesProgramAccount(authorizationRulesProgram ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[23] = ag_solanago.Meta(authorizationRulesProgram)
	return inst
}

// GetAuthorizationRulesProgramAccount gets the "authorizationRulesProgram" account.
func (inst *MintV2) GetAuthorizationRulesProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(23)
}

// SetAuthorizationRulesAccount sets the "authorizationRules" account.
func (inst *MintV2) SetAuthorizationRulesAccount(authorizationRules ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[24] = ag_solanago.Meta(authorizationRules)
	return inst
}

// GetAuthorizationRulesAccount gets the "authorizationRules" account.
func (inst *MintV2) GetAuthorizationRulesAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(24)
}

func (inst MintV2) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MintV2,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MintV2) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MintV2) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.MintArgs == nil {
			return errors.New("MintArgs parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.CandyGuard is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.CandyMachineProgram is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.CandyMachine is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.CandyMachineAuthorityPda is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Minter is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.NftMint is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.NftMintAuthority is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.NftMetadata is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.NftMasterEdition is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.Token is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TokenRecord is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.CollectionDelegateRecord is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.CollectionMint is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.CollectionMetadata is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.CollectionMasterEdition is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.CollectionUpdateAuthority is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.TokenMetadataProgram is not set")
		}
		if inst.AccountMetaSlice[18] == nil {
			return errors.New("accounts.SplTokenProgram is not set")
		}
		if inst.AccountMetaSlice[19] == nil {
			return errors.New("accounts.SplAtaProgram is not set")
		}
		if inst.AccountMetaSlice[20] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[21] == nil {
			return errors.New("accounts.SysvarInstructions is not set")
		}
		if inst.AccountMetaSlice[22] == nil {
			return errors.New("accounts.RecentSlothashes is not set")
		}
		if inst.AccountMetaSlice[23] == nil {
			return errors.New("accounts.AuthorizationRulesProgram is not set")
		}
		if inst.AccountMetaSlice[24] == nil {
			return errors.New("accounts.AuthorizationRules is not set")
		}
	}
	return nil
}

func (inst *MintV2) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MintV2")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("MintArgs", *inst.MintArgs))
						paramsBranch.Child(ag_format.Param("   Label (OPT)", inst.Label))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=25]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("               candyGuard", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("      candyMachineProgram", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("             candyMachine", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta(" candyMachineAuthorityPda", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                    payer", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                   minter", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                  nftMint", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("         nftMintAuthority", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("              nftMetadata", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("         nftMasterEdition", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("                    token", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("              tokenRecord", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta(" collectionDelegateRecord", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("           collectionMint", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("       collectionMetadata", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("  collectionMasterEdition", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("collectionUpdateAuthority", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("     tokenMetadataProgram", inst.AccountMetaSlice.Get(17)))
						accountsBranch.Child(ag_format.Meta("          splTokenProgram", inst.AccountMetaSlice.Get(18)))
						accountsBranch.Child(ag_format.Meta("            splAtaProgram", inst.AccountMetaSlice.Get(19)))
						accountsBranch.Child(ag_format.Meta("            systemProgram", inst.AccountMetaSlice.Get(20)))
						accountsBranch.Child(ag_format.Meta("       sysvarInstructions", inst.AccountMetaSlice.Get(21)))
						accountsBranch.Child(ag_format.Meta("         recentSlothashes", inst.AccountMetaSlice.Get(22)))
						accountsBranch.Child(ag_format.Meta("authorizationRulesProgram", inst.AccountMetaSlice.Get(23)))
						accountsBranch.Child(ag_format.Meta("       authorizationRules", inst.AccountMetaSlice.Get(24)))
					})
				})
		})
}

func (obj MintV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MintArgs` param:
	err = encoder.Encode(obj.MintArgs)
	if err != nil {
		return err
	}
	// Serialize `Label` param (optional):
	{
		if obj.Label == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Label)
			if err != nil {
				return err
			}
		}
	}
	return nil
}
func (obj *MintV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MintArgs`:
	err = decoder.Decode(&obj.MintArgs)
	if err != nil {
		return err
	}
	// Deserialize `Label` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Label)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

// NewMintV2Instruction declares a new MintV2 instruction with the provided parameters and accounts.
func NewMintV2Instruction(
	// Parameters:
	mintArgs []byte,
	label string,
	// Accounts:
	candyGuard ag_solanago.PublicKey,
	candyMachineProgram ag_solanago.PublicKey,
	candyMachine ag_solanago.PublicKey,
	candyMachineAuthorityPda ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	minter ag_solanago.PublicKey,
	nftMint ag_solanago.PublicKey,
	nftMintAuthority ag_solanago.PublicKey,
	nftMetadata ag_solanago.PublicKey,
	nftMasterEdition ag_solanago.PublicKey,
	token ag_solanago.PublicKey,
	tokenRecord ag_solanago.PublicKey,
	collectionDelegateRecord ag_solanago.PublicKey,
	collectionMint ag_solanago.PublicKey,
	collectionMetadata ag_solanago.PublicKey,
	collectionMasterEdition ag_solanago.PublicKey,
	collectionUpdateAuthority ag_solanago.PublicKey,
	tokenMetadataProgram ag_solanago.PublicKey,
	splTokenProgram ag_solanago.PublicKey,
	splAtaProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	sysvarInstructions ag_solanago.PublicKey,
	recentSlothashes ag_solanago.PublicKey,
	authorizationRulesProgram ag_solanago.PublicKey,
	authorizationRules ag_solanago.PublicKey) *MintV2 {
	return NewMintV2InstructionBuilder().
		SetMintArgs(mintArgs).
		SetLabel(label).
		SetCandyGuardAccount(candyGuard).
		SetCandyMachineProgramAccount(candyMachineProgram).
		SetCandyMachineAccount(candyMachine).
		SetCandyMachineAuthorityPdaAccount(candyMachineAuthorityPda).
		SetPayerAccount(payer).
		SetMinterAccount(minter).
		SetNftMintAccount(nftMint).
		SetNftMintAuthorityAccount(nftMintAuthority).
		SetNftMetadataAccount(nftMetadata).
		SetNftMasterEditionAccount(nftMasterEdition).
		SetTokenAccount(token).
		SetTokenRecordAccount(tokenRecord).
		SetCollectionDelegateRecordAccount(collectionDelegateRecord).
		SetCollectionMintAccount(collectionMint).
		SetCollectionMetadataAccount(collectionMetadata).
		SetCollectionMasterEditionAccount(collectionMasterEdition).
		SetCollectionUpdateAuthorityAccount(collectionUpdateAuthority).
		SetTokenMetadataProgramAccount(tokenMetadataProgram).
		SetSplTokenProgramAccount(splTokenProgram).
		SetSplAtaProgramAccount(splAtaProgram).
		SetSystemProgramAccount(systemProgram).
		SetSysvarInstructionsAccount(sysvarInstructions).
		SetRecentSlothashesAccount(recentSlothashes).
		SetAuthorizationRulesProgramAccount(authorizationRulesProgram).
		SetAuthorizationRulesAccount(authorizationRules)
}
