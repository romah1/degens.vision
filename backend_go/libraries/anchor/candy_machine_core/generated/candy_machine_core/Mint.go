// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package candy_machine_core

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Mint is the `mint` instruction.
type Mint struct {

	// [0] = [WRITE] candyMachine
	//
	// [1] = [WRITE] authorityPda
	//
	// [2] = [SIGNER] mintAuthority
	//
	// [3] = [WRITE, SIGNER] payer
	//
	// [4] = [WRITE] nftMint
	//
	// [5] = [SIGNER] nftMintAuthority
	//
	// [6] = [WRITE] nftMetadata
	//
	// [7] = [WRITE] nftMasterEdition
	//
	// [8] = [] collectionAuthorityRecord
	//
	// [9] = [] collectionMint
	//
	// [10] = [WRITE] collectionMetadata
	//
	// [11] = [] collectionMasterEdition
	//
	// [12] = [] collectionUpdateAuthority
	//
	// [13] = [] tokenMetadataProgram
	//
	// [14] = [] tokenProgram
	//
	// [15] = [] systemProgram
	//
	// [16] = [] recentSlothashes
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMintInstructionBuilder creates a new `Mint` instruction builder.
func NewMintInstructionBuilder() *Mint {
	nd := &Mint{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 17),
	}
	return nd
}

// SetCandyMachineAccount sets the "candyMachine" account.
func (inst *Mint) SetCandyMachineAccount(candyMachine ag_solanago.PublicKey) *Mint {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(candyMachine).WRITE()
	return inst
}

// GetCandyMachineAccount gets the "candyMachine" account.
func (inst *Mint) GetCandyMachineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAuthorityPdaAccount sets the "authorityPda" account.
func (inst *Mint) SetAuthorityPdaAccount(authorityPda ag_solanago.PublicKey) *Mint {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authorityPda).WRITE()
	return inst
}

// GetAuthorityPdaAccount gets the "authorityPda" account.
func (inst *Mint) GetAuthorityPdaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMintAuthorityAccount sets the "mintAuthority" account.
func (inst *Mint) SetMintAuthorityAccount(mintAuthority ag_solanago.PublicKey) *Mint {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(mintAuthority).SIGNER()
	return inst
}

// GetMintAuthorityAccount gets the "mintAuthority" account.
func (inst *Mint) GetMintAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPayerAccount sets the "payer" account.
func (inst *Mint) SetPayerAccount(payer ag_solanago.PublicKey) *Mint {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *Mint) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetNftMintAccount sets the "nftMint" account.
func (inst *Mint) SetNftMintAccount(nftMint ag_solanago.PublicKey) *Mint {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(nftMint).WRITE()
	return inst
}

// GetNftMintAccount gets the "nftMint" account.
func (inst *Mint) GetNftMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetNftMintAuthorityAccount sets the "nftMintAuthority" account.
func (inst *Mint) SetNftMintAuthorityAccount(nftMintAuthority ag_solanago.PublicKey) *Mint {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(nftMintAuthority).SIGNER()
	return inst
}

// GetNftMintAuthorityAccount gets the "nftMintAuthority" account.
func (inst *Mint) GetNftMintAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetNftMetadataAccount sets the "nftMetadata" account.
func (inst *Mint) SetNftMetadataAccount(nftMetadata ag_solanago.PublicKey) *Mint {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(nftMetadata).WRITE()
	return inst
}

// GetNftMetadataAccount gets the "nftMetadata" account.
func (inst *Mint) GetNftMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetNftMasterEditionAccount sets the "nftMasterEdition" account.
func (inst *Mint) SetNftMasterEditionAccount(nftMasterEdition ag_solanago.PublicKey) *Mint {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(nftMasterEdition).WRITE()
	return inst
}

// GetNftMasterEditionAccount gets the "nftMasterEdition" account.
func (inst *Mint) GetNftMasterEditionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetCollectionAuthorityRecordAccount sets the "collectionAuthorityRecord" account.
func (inst *Mint) SetCollectionAuthorityRecordAccount(collectionAuthorityRecord ag_solanago.PublicKey) *Mint {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(collectionAuthorityRecord)
	return inst
}

// GetCollectionAuthorityRecordAccount gets the "collectionAuthorityRecord" account.
func (inst *Mint) GetCollectionAuthorityRecordAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetCollectionMintAccount sets the "collectionMint" account.
func (inst *Mint) SetCollectionMintAccount(collectionMint ag_solanago.PublicKey) *Mint {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(collectionMint)
	return inst
}

// GetCollectionMintAccount gets the "collectionMint" account.
func (inst *Mint) GetCollectionMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetCollectionMetadataAccount sets the "collectionMetadata" account.
func (inst *Mint) SetCollectionMetadataAccount(collectionMetadata ag_solanago.PublicKey) *Mint {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(collectionMetadata).WRITE()
	return inst
}

// GetCollectionMetadataAccount gets the "collectionMetadata" account.
func (inst *Mint) GetCollectionMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetCollectionMasterEditionAccount sets the "collectionMasterEdition" account.
func (inst *Mint) SetCollectionMasterEditionAccount(collectionMasterEdition ag_solanago.PublicKey) *Mint {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(collectionMasterEdition)
	return inst
}

// GetCollectionMasterEditionAccount gets the "collectionMasterEdition" account.
func (inst *Mint) GetCollectionMasterEditionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetCollectionUpdateAuthorityAccount sets the "collectionUpdateAuthority" account.
func (inst *Mint) SetCollectionUpdateAuthorityAccount(collectionUpdateAuthority ag_solanago.PublicKey) *Mint {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(collectionUpdateAuthority)
	return inst
}

// GetCollectionUpdateAuthorityAccount gets the "collectionUpdateAuthority" account.
func (inst *Mint) GetCollectionUpdateAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetTokenMetadataProgramAccount sets the "tokenMetadataProgram" account.
func (inst *Mint) SetTokenMetadataProgramAccount(tokenMetadataProgram ag_solanago.PublicKey) *Mint {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(tokenMetadataProgram)
	return inst
}

// GetTokenMetadataProgramAccount gets the "tokenMetadataProgram" account.
func (inst *Mint) GetTokenMetadataProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *Mint) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *Mint {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *Mint) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *Mint) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *Mint {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *Mint) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetRecentSlothashesAccount sets the "recentSlothashes" account.
func (inst *Mint) SetRecentSlothashesAccount(recentSlothashes ag_solanago.PublicKey) *Mint {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(recentSlothashes)
	return inst
}

// GetRecentSlothashesAccount gets the "recentSlothashes" account.
func (inst *Mint) GetRecentSlothashesAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

func (inst Mint) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Mint,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Mint) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Mint) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.CandyMachine is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.AuthorityPda is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.MintAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.NftMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.NftMintAuthority is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.NftMetadata is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.NftMasterEdition is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.CollectionAuthorityRecord is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.CollectionMint is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.CollectionMetadata is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.CollectionMasterEdition is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.CollectionUpdateAuthority is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.TokenMetadataProgram is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.RecentSlothashes is not set")
		}
	}
	return nil
}

func (inst *Mint) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Mint")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=17]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("             candyMachine", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("             authorityPda", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("            mintAuthority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                    payer", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                  nftMint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("         nftMintAuthority", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("              nftMetadata", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("         nftMasterEdition", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("collectionAuthorityRecord", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("           collectionMint", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("       collectionMetadata", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("  collectionMasterEdition", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("collectionUpdateAuthority", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("     tokenMetadataProgram", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("             tokenProgram", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("            systemProgram", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("         recentSlothashes", inst.AccountMetaSlice.Get(16)))
					})
				})
		})
}

func (obj Mint) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *Mint) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewMintInstruction declares a new Mint instruction with the provided parameters and accounts.
func NewMintInstruction(
	// Accounts:
	candyMachine ag_solanago.PublicKey,
	authorityPda ag_solanago.PublicKey,
	mintAuthority ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	nftMint ag_solanago.PublicKey,
	nftMintAuthority ag_solanago.PublicKey,
	nftMetadata ag_solanago.PublicKey,
	nftMasterEdition ag_solanago.PublicKey,
	collectionAuthorityRecord ag_solanago.PublicKey,
	collectionMint ag_solanago.PublicKey,
	collectionMetadata ag_solanago.PublicKey,
	collectionMasterEdition ag_solanago.PublicKey,
	collectionUpdateAuthority ag_solanago.PublicKey,
	tokenMetadataProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	recentSlothashes ag_solanago.PublicKey) *Mint {
	return NewMintInstructionBuilder().
		SetCandyMachineAccount(candyMachine).
		SetAuthorityPdaAccount(authorityPda).
		SetMintAuthorityAccount(mintAuthority).
		SetPayerAccount(payer).
		SetNftMintAccount(nftMint).
		SetNftMintAuthorityAccount(nftMintAuthority).
		SetNftMetadataAccount(nftMetadata).
		SetNftMasterEditionAccount(nftMasterEdition).
		SetCollectionAuthorityRecordAccount(collectionAuthorityRecord).
		SetCollectionMintAccount(collectionMint).
		SetCollectionMetadataAccount(collectionMetadata).
		SetCollectionMasterEditionAccount(collectionMasterEdition).
		SetCollectionUpdateAuthorityAccount(collectionUpdateAuthority).
		SetTokenMetadataProgramAccount(tokenMetadataProgram).
		SetTokenProgramAccount(tokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetRecentSlothashesAccount(recentSlothashes)
}
