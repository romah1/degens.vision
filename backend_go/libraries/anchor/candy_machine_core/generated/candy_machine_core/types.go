// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package candy_machine_core

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type CandyMachineData struct {
	ItemsAvailable       uint64
	Symbol               string
	SellerFeeBasisPoints uint16
	MaxSupply            uint64
	IsMutable            bool
	Creators             []Creator
	ConfigLineSettings   *ConfigLineSettings `bin:"optional"`
	HiddenSettings       *HiddenSettings     `bin:"optional"`
}

func (obj CandyMachineData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ItemsAvailable` param:
	err = encoder.Encode(obj.ItemsAvailable)
	if err != nil {
		return err
	}
	// Serialize `Symbol` param:
	err = encoder.Encode(obj.Symbol)
	if err != nil {
		return err
	}
	// Serialize `SellerFeeBasisPoints` param:
	err = encoder.Encode(obj.SellerFeeBasisPoints)
	if err != nil {
		return err
	}
	// Serialize `MaxSupply` param:
	err = encoder.Encode(obj.MaxSupply)
	if err != nil {
		return err
	}
	// Serialize `IsMutable` param:
	err = encoder.Encode(obj.IsMutable)
	if err != nil {
		return err
	}
	// Serialize `Creators` param:
	err = encoder.Encode(obj.Creators)
	if err != nil {
		return err
	}
	// Serialize `ConfigLineSettings` param (optional):
	{
		if obj.ConfigLineSettings == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.ConfigLineSettings)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `HiddenSettings` param (optional):
	{
		if obj.HiddenSettings == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.HiddenSettings)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *CandyMachineData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ItemsAvailable`:
	err = decoder.Decode(&obj.ItemsAvailable)
	if err != nil {
		return err
	}
	// Deserialize `Symbol`:
	err = decoder.Decode(&obj.Symbol)
	if err != nil {
		return err
	}
	// Deserialize `SellerFeeBasisPoints`:
	err = decoder.Decode(&obj.SellerFeeBasisPoints)
	if err != nil {
		return err
	}
	// Deserialize `MaxSupply`:
	err = decoder.Decode(&obj.MaxSupply)
	if err != nil {
		return err
	}
	// Deserialize `IsMutable`:
	err = decoder.Decode(&obj.IsMutable)
	if err != nil {
		return err
	}
	// Deserialize `Creators`:
	err = decoder.Decode(&obj.Creators)
	if err != nil {
		return err
	}
	// Deserialize `ConfigLineSettings` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.ConfigLineSettings)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `HiddenSettings` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.HiddenSettings)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type Creator struct {
	Address         ag_solanago.PublicKey
	Verified        bool
	PercentageShare uint8
}

func (obj Creator) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Address` param:
	err = encoder.Encode(obj.Address)
	if err != nil {
		return err
	}
	// Serialize `Verified` param:
	err = encoder.Encode(obj.Verified)
	if err != nil {
		return err
	}
	// Serialize `PercentageShare` param:
	err = encoder.Encode(obj.PercentageShare)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Creator) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Address`:
	err = decoder.Decode(&obj.Address)
	if err != nil {
		return err
	}
	// Deserialize `Verified`:
	err = decoder.Decode(&obj.Verified)
	if err != nil {
		return err
	}
	// Deserialize `PercentageShare`:
	err = decoder.Decode(&obj.PercentageShare)
	if err != nil {
		return err
	}
	return nil
}

type HiddenSettings struct {
	Name string
	Uri  string
	Hash [32]uint8
}

func (obj HiddenSettings) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Uri` param:
	err = encoder.Encode(obj.Uri)
	if err != nil {
		return err
	}
	// Serialize `Hash` param:
	err = encoder.Encode(obj.Hash)
	if err != nil {
		return err
	}
	return nil
}

func (obj *HiddenSettings) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Uri`:
	err = decoder.Decode(&obj.Uri)
	if err != nil {
		return err
	}
	// Deserialize `Hash`:
	err = decoder.Decode(&obj.Hash)
	if err != nil {
		return err
	}
	return nil
}

type ConfigLineSettings struct {
	PrefixName   string
	NameLength   uint32
	PrefixUri    string
	UriLength    uint32
	IsSequential bool
}

func (obj ConfigLineSettings) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PrefixName` param:
	err = encoder.Encode(obj.PrefixName)
	if err != nil {
		return err
	}
	// Serialize `NameLength` param:
	err = encoder.Encode(obj.NameLength)
	if err != nil {
		return err
	}
	// Serialize `PrefixUri` param:
	err = encoder.Encode(obj.PrefixUri)
	if err != nil {
		return err
	}
	// Serialize `UriLength` param:
	err = encoder.Encode(obj.UriLength)
	if err != nil {
		return err
	}
	// Serialize `IsSequential` param:
	err = encoder.Encode(obj.IsSequential)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ConfigLineSettings) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PrefixName`:
	err = decoder.Decode(&obj.PrefixName)
	if err != nil {
		return err
	}
	// Deserialize `NameLength`:
	err = decoder.Decode(&obj.NameLength)
	if err != nil {
		return err
	}
	// Deserialize `PrefixUri`:
	err = decoder.Decode(&obj.PrefixUri)
	if err != nil {
		return err
	}
	// Deserialize `UriLength`:
	err = decoder.Decode(&obj.UriLength)
	if err != nil {
		return err
	}
	// Deserialize `IsSequential`:
	err = decoder.Decode(&obj.IsSequential)
	if err != nil {
		return err
	}
	return nil
}

type ConfigLine struct {
	Name string
	Uri  string
}

func (obj ConfigLine) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Uri` param:
	err = encoder.Encode(obj.Uri)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ConfigLine) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Uri`:
	err = decoder.Decode(&obj.Uri)
	if err != nil {
		return err
	}
	return nil
}

type AccountVersion ag_binary.BorshEnum

const (
	AccountVersionV1 AccountVersion = iota
	AccountVersionV2
)

func (value AccountVersion) String() string {
	switch value {
	case AccountVersionV1:
		return "V1"
	case AccountVersionV2:
		return "V2"
	default:
		return ""
	}
}
