// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package compressed_minter

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "CompressedMinter"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_SetPriceLock = ag_binary.TypeID([8]byte{17, 199, 135, 242, 74, 211, 71, 54})

	Instruction_CreateMinter = ag_binary.TypeID([8]byte{9, 49, 131, 52, 143, 192, 207, 23})

	Instruction_UpdateMachine = ag_binary.TypeID([8]byte{107, 38, 205, 118, 194, 110, 169, 123})

	Instruction_InitMachine = ag_binary.TypeID([8]byte{154, 139, 175, 13, 145, 116, 217, 54})

	Instruction_WriteMultipliers = ag_binary.TypeID([8]byte{32, 47, 212, 212, 149, 43, 37, 217})

	Instruction_ResizeMultiplers = ag_binary.TypeID([8]byte{211, 222, 22, 200, 169, 85, 29, 77})

	Instruction_RelinquishCosigner = ag_binary.TypeID([8]byte{69, 8, 121, 143, 73, 21, 58, 18})

	Instruction_SwapToFungible = ag_binary.TypeID([8]byte{255, 175, 252, 80, 237, 109, 10, 98})

	Instruction_T22LiquidMint = ag_binary.TypeID([8]byte{165, 49, 179, 244, 11, 182, 33, 3})

	Instruction_FairlaunchMint = ag_binary.TypeID([8]byte{253, 78, 214, 45, 131, 20, 100, 113})

	Instruction_SetName = ag_binary.TypeID([8]byte{78, 194, 111, 229, 198, 169, 162, 106})

	Instruction_SetNameCore = ag_binary.TypeID([8]byte{19, 18, 70, 129, 251, 48, 146, 21})

	Instruction_MintCore = ag_binary.TypeID([8]byte{183, 49, 119, 128, 163, 139, 45, 248})

	Instruction_MintV2 = ag_binary.TypeID([8]byte{120, 121, 23, 146, 173, 110, 199, 205})

	Instruction_EditMinter = ag_binary.TypeID([8]byte{122, 157, 46, 207, 19, 37, 142, 90})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_SetPriceLock:
		return "SetPriceLock"
	case Instruction_CreateMinter:
		return "CreateMinter"
	case Instruction_UpdateMachine:
		return "UpdateMachine"
	case Instruction_InitMachine:
		return "InitMachine"
	case Instruction_WriteMultipliers:
		return "WriteMultipliers"
	case Instruction_ResizeMultiplers:
		return "ResizeMultiplers"
	case Instruction_RelinquishCosigner:
		return "RelinquishCosigner"
	case Instruction_SwapToFungible:
		return "SwapToFungible"
	case Instruction_T22LiquidMint:
		return "T22LiquidMint"
	case Instruction_FairlaunchMint:
		return "FairlaunchMint"
	case Instruction_SetName:
		return "SetName"
	case Instruction_SetNameCore:
		return "SetNameCore"
	case Instruction_MintCore:
		return "MintCore"
	case Instruction_MintV2:
		return "MintV2"
	case Instruction_EditMinter:
		return "EditMinter"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"set_price_lock", (*SetPriceLock)(nil),
		},
		{
			"create_minter", (*CreateMinter)(nil),
		},
		{
			"update_machine", (*UpdateMachine)(nil),
		},
		{
			"init_machine", (*InitMachine)(nil),
		},
		{
			"write_multipliers", (*WriteMultipliers)(nil),
		},
		{
			"resize_multiplers", (*ResizeMultiplers)(nil),
		},
		{
			"relinquish_cosigner", (*RelinquishCosigner)(nil),
		},
		{
			"swap_to_fungible", (*SwapToFungible)(nil),
		},
		{
			"t22_liquid_mint", (*T22LiquidMint)(nil),
		},
		{
			"fairlaunch_mint", (*FairlaunchMint)(nil),
		},
		{
			"set_name", (*SetName)(nil),
		},
		{
			"set_name_core", (*SetNameCore)(nil),
		},
		{
			"mint_core", (*MintCore)(nil),
		},
		{
			"mint_v2", (*MintV2)(nil),
		},
		{
			"edit_minter", (*EditMinter)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
