// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package compressed_minter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// MintCore is the `mintCore` instruction.
type MintCore struct {
	Input *MachineMintInput

	// [0] = [WRITE, SIGNER] buyer
	//
	// [1] = [SIGNER] requiredSigner
	//
	// [2] = [WRITE] machine
	//
	// [3] = [WRITE] totalMints
	//
	// [4] = [WRITE] wallet
	//
	// [5] = [WRITE] wallet2
	//
	// [6] = [] systemProgram
	//
	// [7] = [WRITE] buyerWlTokenWallet
	//
	// [8] = [] wlNftMetadata
	//
	// [9] = [WRITE] mintsPerWlNft
	//
	// [10] = [WRITE] whitelistMint
	//
	// [11] = [WRITE] buyerPaymentTokenWallet
	//
	// [12] = [] instructionSysvarAccount
	//
	// [13] = [] tokenProgram
	//
	// [14] = [] token22Program
	//
	// [15] = [] tokenMetadataProgram
	//
	// [16] = [] accountCompressionProgram
	//
	// [17] = [] noopProgram
	//
	// [18] = [] recentSlothashes
	//
	// [19] = [] bubblegumProgram
	//
	// [20] = [] wlNftTree
	//
	// [21] = [WRITE] wlNftTreeAuthority
	//
	// [22] = [] associatedTokenProgram
	//
	// [23] = [] coreProgram
	//
	// [24] = [WRITE] collection
	//
	// [25] = [WRITE, SIGNER] asset
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMintCoreInstructionBuilder creates a new `MintCore` instruction builder.
func NewMintCoreInstructionBuilder() *MintCore {
	nd := &MintCore{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 26),
	}
	return nd
}

// SetInput sets the "input" parameter.
func (inst *MintCore) SetInput(input MachineMintInput) *MintCore {
	inst.Input = &input
	return inst
}

// SetBuyerAccount sets the "buyer" account.
func (inst *MintCore) SetBuyerAccount(buyer ag_solanago.PublicKey) *MintCore {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(buyer).WRITE().SIGNER()
	return inst
}

// GetBuyerAccount gets the "buyer" account.
func (inst *MintCore) GetBuyerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetRequiredSignerAccount sets the "requiredSigner" account.
func (inst *MintCore) SetRequiredSignerAccount(requiredSigner ag_solanago.PublicKey) *MintCore {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(requiredSigner).SIGNER()
	return inst
}

// GetRequiredSignerAccount gets the "requiredSigner" account.
func (inst *MintCore) GetRequiredSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMachineAccount sets the "machine" account.
func (inst *MintCore) SetMachineAccount(machine ag_solanago.PublicKey) *MintCore {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(machine).WRITE()
	return inst
}

// GetMachineAccount gets the "machine" account.
func (inst *MintCore) GetMachineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTotalMintsAccount sets the "totalMints" account.
func (inst *MintCore) SetTotalMintsAccount(totalMints ag_solanago.PublicKey) *MintCore {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(totalMints).WRITE()
	return inst
}

// GetTotalMintsAccount gets the "totalMints" account.
func (inst *MintCore) GetTotalMintsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetWalletAccount sets the "wallet" account.
func (inst *MintCore) SetWalletAccount(wallet ag_solanago.PublicKey) *MintCore {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(wallet).WRITE()
	return inst
}

// GetWalletAccount gets the "wallet" account.
func (inst *MintCore) GetWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetWallet2Account sets the "wallet2" account.
func (inst *MintCore) SetWallet2Account(wallet2 ag_solanago.PublicKey) *MintCore {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(wallet2).WRITE()
	return inst
}

// GetWallet2Account gets the "wallet2" account.
func (inst *MintCore) GetWallet2Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *MintCore) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *MintCore {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *MintCore) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetBuyerWlTokenWalletAccount sets the "buyerWlTokenWallet" account.
func (inst *MintCore) SetBuyerWlTokenWalletAccount(buyerWlTokenWallet ag_solanago.PublicKey) *MintCore {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(buyerWlTokenWallet).WRITE()
	return inst
}

// GetBuyerWlTokenWalletAccount gets the "buyerWlTokenWallet" account.
func (inst *MintCore) GetBuyerWlTokenWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetWlNftMetadataAccount sets the "wlNftMetadata" account.
func (inst *MintCore) SetWlNftMetadataAccount(wlNftMetadata ag_solanago.PublicKey) *MintCore {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(wlNftMetadata)
	return inst
}

// GetWlNftMetadataAccount gets the "wlNftMetadata" account.
func (inst *MintCore) GetWlNftMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetMintsPerWlNftAccount sets the "mintsPerWlNft" account.
func (inst *MintCore) SetMintsPerWlNftAccount(mintsPerWlNft ag_solanago.PublicKey) *MintCore {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(mintsPerWlNft).WRITE()
	return inst
}

// GetMintsPerWlNftAccount gets the "mintsPerWlNft" account.
func (inst *MintCore) GetMintsPerWlNftAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetWhitelistMintAccount sets the "whitelistMint" account.
func (inst *MintCore) SetWhitelistMintAccount(whitelistMint ag_solanago.PublicKey) *MintCore {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(whitelistMint).WRITE()
	return inst
}

// GetWhitelistMintAccount gets the "whitelistMint" account.
func (inst *MintCore) GetWhitelistMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetBuyerPaymentTokenWalletAccount sets the "buyerPaymentTokenWallet" account.
func (inst *MintCore) SetBuyerPaymentTokenWalletAccount(buyerPaymentTokenWallet ag_solanago.PublicKey) *MintCore {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(buyerPaymentTokenWallet).WRITE()
	return inst
}

// GetBuyerPaymentTokenWalletAccount gets the "buyerPaymentTokenWallet" account.
func (inst *MintCore) GetBuyerPaymentTokenWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetInstructionSysvarAccountAccount sets the "instructionSysvarAccount" account.
func (inst *MintCore) SetInstructionSysvarAccountAccount(instructionSysvarAccount ag_solanago.PublicKey) *MintCore {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(instructionSysvarAccount)
	return inst
}

// GetInstructionSysvarAccountAccount gets the "instructionSysvarAccount" account.
func (inst *MintCore) GetInstructionSysvarAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *MintCore) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *MintCore {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *MintCore) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetToken22ProgramAccount sets the "token22Program" account.
func (inst *MintCore) SetToken22ProgramAccount(token22Program ag_solanago.PublicKey) *MintCore {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(token22Program)
	return inst
}

// GetToken22ProgramAccount gets the "token22Program" account.
func (inst *MintCore) GetToken22ProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetTokenMetadataProgramAccount sets the "tokenMetadataProgram" account.
func (inst *MintCore) SetTokenMetadataProgramAccount(tokenMetadataProgram ag_solanago.PublicKey) *MintCore {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(tokenMetadataProgram)
	return inst
}

// GetTokenMetadataProgramAccount gets the "tokenMetadataProgram" account.
func (inst *MintCore) GetTokenMetadataProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetAccountCompressionProgramAccount sets the "accountCompressionProgram" account.
func (inst *MintCore) SetAccountCompressionProgramAccount(accountCompressionProgram ag_solanago.PublicKey) *MintCore {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(accountCompressionProgram)
	return inst
}

// GetAccountCompressionProgramAccount gets the "accountCompressionProgram" account.
func (inst *MintCore) GetAccountCompressionProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

// SetNoopProgramAccount sets the "noopProgram" account.
func (inst *MintCore) SetNoopProgramAccount(noopProgram ag_solanago.PublicKey) *MintCore {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(noopProgram)
	return inst
}

// GetNoopProgramAccount gets the "noopProgram" account.
func (inst *MintCore) GetNoopProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(17)
}

// SetRecentSlothashesAccount sets the "recentSlothashes" account.
func (inst *MintCore) SetRecentSlothashesAccount(recentSlothashes ag_solanago.PublicKey) *MintCore {
	inst.AccountMetaSlice[18] = ag_solanago.Meta(recentSlothashes)
	return inst
}

// GetRecentSlothashesAccount gets the "recentSlothashes" account.
func (inst *MintCore) GetRecentSlothashesAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(18)
}

// SetBubblegumProgramAccount sets the "bubblegumProgram" account.
func (inst *MintCore) SetBubblegumProgramAccount(bubblegumProgram ag_solanago.PublicKey) *MintCore {
	inst.AccountMetaSlice[19] = ag_solanago.Meta(bubblegumProgram)
	return inst
}

// GetBubblegumProgramAccount gets the "bubblegumProgram" account.
func (inst *MintCore) GetBubblegumProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(19)
}

// SetWlNftTreeAccount sets the "wlNftTree" account.
func (inst *MintCore) SetWlNftTreeAccount(wlNftTree ag_solanago.PublicKey) *MintCore {
	inst.AccountMetaSlice[20] = ag_solanago.Meta(wlNftTree)
	return inst
}

// GetWlNftTreeAccount gets the "wlNftTree" account.
func (inst *MintCore) GetWlNftTreeAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(20)
}

// SetWlNftTreeAuthorityAccount sets the "wlNftTreeAuthority" account.
func (inst *MintCore) SetWlNftTreeAuthorityAccount(wlNftTreeAuthority ag_solanago.PublicKey) *MintCore {
	inst.AccountMetaSlice[21] = ag_solanago.Meta(wlNftTreeAuthority).WRITE()
	return inst
}

// GetWlNftTreeAuthorityAccount gets the "wlNftTreeAuthority" account.
func (inst *MintCore) GetWlNftTreeAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(21)
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *MintCore) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *MintCore {
	inst.AccountMetaSlice[22] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *MintCore) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(22)
}

// SetCoreProgramAccount sets the "coreProgram" account.
func (inst *MintCore) SetCoreProgramAccount(coreProgram ag_solanago.PublicKey) *MintCore {
	inst.AccountMetaSlice[23] = ag_solanago.Meta(coreProgram)
	return inst
}

// GetCoreProgramAccount gets the "coreProgram" account.
func (inst *MintCore) GetCoreProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(23)
}

// SetCollectionAccount sets the "collection" account.
func (inst *MintCore) SetCollectionAccount(collection ag_solanago.PublicKey) *MintCore {
	inst.AccountMetaSlice[24] = ag_solanago.Meta(collection).WRITE()
	return inst
}

// GetCollectionAccount gets the "collection" account.
func (inst *MintCore) GetCollectionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(24)
}

// SetAssetAccount sets the "asset" account.
func (inst *MintCore) SetAssetAccount(asset ag_solanago.PublicKey) *MintCore {
	inst.AccountMetaSlice[25] = ag_solanago.Meta(asset).WRITE().SIGNER()
	return inst
}

// GetAssetAccount gets the "asset" account.
func (inst *MintCore) GetAssetAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(25)
}

func (inst MintCore) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MintCore,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MintCore) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MintCore) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Input == nil {
			return errors.New("Input parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Buyer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.RequiredSigner is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Machine is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TotalMints is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Wallet is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Wallet2 is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.BuyerWlTokenWallet is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.WlNftMetadata is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.MintsPerWlNft is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.WhitelistMint is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.BuyerPaymentTokenWallet is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.InstructionSysvarAccount is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.Token22Program is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.TokenMetadataProgram is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.AccountCompressionProgram is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.NoopProgram is not set")
		}
		if inst.AccountMetaSlice[18] == nil {
			return errors.New("accounts.RecentSlothashes is not set")
		}
		if inst.AccountMetaSlice[19] == nil {
			return errors.New("accounts.BubblegumProgram is not set")
		}
		if inst.AccountMetaSlice[20] == nil {
			return errors.New("accounts.WlNftTree is not set")
		}
		if inst.AccountMetaSlice[21] == nil {
			return errors.New("accounts.WlNftTreeAuthority is not set")
		}
		if inst.AccountMetaSlice[22] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[23] == nil {
			return errors.New("accounts.CoreProgram is not set")
		}
		if inst.AccountMetaSlice[24] == nil {
			return errors.New("accounts.Collection is not set")
		}
		if inst.AccountMetaSlice[25] == nil {
			return errors.New("accounts.Asset is not set")
		}
	}
	return nil
}

func (inst *MintCore) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MintCore")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Input", *inst.Input))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=26]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                    buyer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("           requiredSigner", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                  machine", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("               totalMints", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                   wallet", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                  wallet2", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("            systemProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("       buyerWlTokenWallet", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("            wlNftMetadata", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("            mintsPerWlNft", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("            whitelistMint", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("  buyerPaymentTokenWallet", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("        instructionSysvar", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("             tokenProgram", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("           token22Program", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("     tokenMetadataProgram", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("accountCompressionProgram", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("              noopProgram", inst.AccountMetaSlice.Get(17)))
						accountsBranch.Child(ag_format.Meta("         recentSlothashes", inst.AccountMetaSlice.Get(18)))
						accountsBranch.Child(ag_format.Meta("         bubblegumProgram", inst.AccountMetaSlice.Get(19)))
						accountsBranch.Child(ag_format.Meta("                wlNftTree", inst.AccountMetaSlice.Get(20)))
						accountsBranch.Child(ag_format.Meta("       wlNftTreeAuthority", inst.AccountMetaSlice.Get(21)))
						accountsBranch.Child(ag_format.Meta("   associatedTokenProgram", inst.AccountMetaSlice.Get(22)))
						accountsBranch.Child(ag_format.Meta("              coreProgram", inst.AccountMetaSlice.Get(23)))
						accountsBranch.Child(ag_format.Meta("               collection", inst.AccountMetaSlice.Get(24)))
						accountsBranch.Child(ag_format.Meta("                    asset", inst.AccountMetaSlice.Get(25)))
					})
				})
		})
}

func (obj MintCore) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Input` param:
	err = encoder.Encode(obj.Input)
	if err != nil {
		return err
	}
	return nil
}
func (obj *MintCore) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Input`:
	err = decoder.Decode(&obj.Input)
	if err != nil {
		return err
	}
	return nil
}

// NewMintCoreInstruction declares a new MintCore instruction with the provided parameters and accounts.
func NewMintCoreInstruction(
	// Parameters:
	input MachineMintInput,
	// Accounts:
	buyer ag_solanago.PublicKey,
	requiredSigner ag_solanago.PublicKey,
	machine ag_solanago.PublicKey,
	totalMints ag_solanago.PublicKey,
	wallet ag_solanago.PublicKey,
	wallet2 ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	buyerWlTokenWallet ag_solanago.PublicKey,
	wlNftMetadata ag_solanago.PublicKey,
	mintsPerWlNft ag_solanago.PublicKey,
	whitelistMint ag_solanago.PublicKey,
	buyerPaymentTokenWallet ag_solanago.PublicKey,
	instructionSysvarAccount ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	token22Program ag_solanago.PublicKey,
	tokenMetadataProgram ag_solanago.PublicKey,
	accountCompressionProgram ag_solanago.PublicKey,
	noopProgram ag_solanago.PublicKey,
	recentSlothashes ag_solanago.PublicKey,
	bubblegumProgram ag_solanago.PublicKey,
	wlNftTree ag_solanago.PublicKey,
	wlNftTreeAuthority ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	coreProgram ag_solanago.PublicKey,
	collection ag_solanago.PublicKey,
	asset ag_solanago.PublicKey) *MintCore {
	return NewMintCoreInstructionBuilder().
		SetInput(input).
		SetBuyerAccount(buyer).
		SetRequiredSignerAccount(requiredSigner).
		SetMachineAccount(machine).
		SetTotalMintsAccount(totalMints).
		SetWalletAccount(wallet).
		SetWallet2Account(wallet2).
		SetSystemProgramAccount(systemProgram).
		SetBuyerWlTokenWalletAccount(buyerWlTokenWallet).
		SetWlNftMetadataAccount(wlNftMetadata).
		SetMintsPerWlNftAccount(mintsPerWlNft).
		SetWhitelistMintAccount(whitelistMint).
		SetBuyerPaymentTokenWalletAccount(buyerPaymentTokenWallet).
		SetInstructionSysvarAccountAccount(instructionSysvarAccount).
		SetTokenProgramAccount(tokenProgram).
		SetToken22ProgramAccount(token22Program).
		SetTokenMetadataProgramAccount(tokenMetadataProgram).
		SetAccountCompressionProgramAccount(accountCompressionProgram).
		SetNoopProgramAccount(noopProgram).
		SetRecentSlothashesAccount(recentSlothashes).
		SetBubblegumProgramAccount(bubblegumProgram).
		SetWlNftTreeAccount(wlNftTree).
		SetWlNftTreeAuthorityAccount(wlNftTreeAuthority).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetCoreProgramAccount(coreProgram).
		SetCollectionAccount(collection).
		SetAssetAccount(asset)
}
