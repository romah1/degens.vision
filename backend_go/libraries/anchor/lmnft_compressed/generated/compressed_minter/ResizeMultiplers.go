// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package compressed_minter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ResizeMultiplers is the `resizeMultiplers` instruction.
type ResizeMultiplers struct {
	Input *ResizeInput

	// [0] = [] machine
	//
	// [1] = [SIGNER] authority
	//
	// [2] = [WRITE] multiplier
	//
	// [3] = [WRITE, SIGNER] payer
	//
	// [4] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewResizeMultiplersInstructionBuilder creates a new `ResizeMultiplers` instruction builder.
func NewResizeMultiplersInstructionBuilder() *ResizeMultiplers {
	nd := &ResizeMultiplers{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetInput sets the "input" parameter.
func (inst *ResizeMultiplers) SetInput(input ResizeInput) *ResizeMultiplers {
	inst.Input = &input
	return inst
}

// SetMachineAccount sets the "machine" account.
func (inst *ResizeMultiplers) SetMachineAccount(machine ag_solanago.PublicKey) *ResizeMultiplers {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(machine)
	return inst
}

// GetMachineAccount gets the "machine" account.
func (inst *ResizeMultiplers) GetMachineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *ResizeMultiplers) SetAuthorityAccount(authority ag_solanago.PublicKey) *ResizeMultiplers {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *ResizeMultiplers) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMultiplierAccount sets the "multiplier" account.
func (inst *ResizeMultiplers) SetMultiplierAccount(multiplier ag_solanago.PublicKey) *ResizeMultiplers {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(multiplier).WRITE()
	return inst
}

// GetMultiplierAccount gets the "multiplier" account.
func (inst *ResizeMultiplers) GetMultiplierAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPayerAccount sets the "payer" account.
func (inst *ResizeMultiplers) SetPayerAccount(payer ag_solanago.PublicKey) *ResizeMultiplers {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *ResizeMultiplers) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *ResizeMultiplers) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *ResizeMultiplers {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *ResizeMultiplers) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst ResizeMultiplers) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ResizeMultiplers,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ResizeMultiplers) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ResizeMultiplers) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Input == nil {
			return errors.New("Input parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Machine is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Multiplier is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *ResizeMultiplers) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ResizeMultiplers")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Input", *inst.Input))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      machine", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("    authority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("   multiplier", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("        payer", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj ResizeMultiplers) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Input` param:
	err = encoder.Encode(obj.Input)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ResizeMultiplers) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Input`:
	err = decoder.Decode(&obj.Input)
	if err != nil {
		return err
	}
	return nil
}

// NewResizeMultiplersInstruction declares a new ResizeMultiplers instruction with the provided parameters and accounts.
func NewResizeMultiplersInstruction(
	// Parameters:
	input ResizeInput,
	// Accounts:
	machine ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	multiplier ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *ResizeMultiplers {
	return NewResizeMultiplersInstructionBuilder().
		SetInput(input).
		SetMachineAccount(machine).
		SetAuthorityAccount(authority).
		SetMultiplierAccount(multiplier).
		SetPayerAccount(payer).
		SetSystemProgramAccount(systemProgram)
}
