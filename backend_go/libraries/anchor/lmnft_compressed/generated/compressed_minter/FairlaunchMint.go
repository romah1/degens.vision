// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package compressed_minter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// FairlaunchMint is the `fairlaunchMint` instruction.
type FairlaunchMint struct {
	Input *MachineMintInput

	// [0] = [WRITE, SIGNER] buyer
	//
	// [1] = [SIGNER] requiredSigner
	//
	// [2] = [WRITE] machine
	//
	// [3] = [] multipliers
	//
	// [4] = [WRITE] totalMints
	//
	// [5] = [WRITE] wallet
	//
	// [6] = [WRITE] wallet2
	//
	// [7] = [] systemProgram
	//
	// [8] = [WRITE] buyerWlTokenWallet
	//
	// [9] = [] wlNftMetadata
	//
	// [10] = [WRITE] mintsPerWlNft
	//
	// [11] = [WRITE] whitelistMint
	//
	// [12] = [WRITE] buyerPaymentTokenWallet
	//
	// [13] = [] instructionSysvarAccount
	//
	// [14] = [] tokenProgram
	//
	// [15] = [] token22Program
	//
	// [16] = [] tokenMetadataProgram
	//
	// [17] = [] accountCompressionProgram
	//
	// [18] = [] noopProgram
	//
	// [19] = [] recentSlothashes
	//
	// [20] = [] bubblegumProgram
	//
	// [21] = [] wlNftTree
	//
	// [22] = [WRITE] wlNftTreeAuthority
	//
	// [23] = [WRITE] deploymentFungibleTokenAccount
	//
	// [24] = [WRITE] deploymentNonFungibleTokenAccount
	//
	// [25] = [WRITE] deployment
	//
	// [26] = [WRITE] deploymentConfig
	//
	// [27] = [WRITE] hashlist
	//
	// [28] = [WRITE] hashlistMarker
	//
	// [29] = [WRITE] fungibleMint
	//
	// [30] = [WRITE, SIGNER] nonFungibleMint
	//
	// [31] = [WRITE] nonFungibleTokenAccount
	//
	// [32] = [] fairLaunch
	//
	// [33] = [] associatedTokenProgram
	//
	// [34] = [] libreplexRoyaltyHook
	//
	// [35] = [WRITE] royaltyHookExtraAccountMeta
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewFairlaunchMintInstructionBuilder creates a new `FairlaunchMint` instruction builder.
func NewFairlaunchMintInstructionBuilder() *FairlaunchMint {
	nd := &FairlaunchMint{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 36),
	}
	return nd
}

// SetInput sets the "input" parameter.
func (inst *FairlaunchMint) SetInput(input MachineMintInput) *FairlaunchMint {
	inst.Input = &input
	return inst
}

// SetBuyerAccount sets the "buyer" account.
func (inst *FairlaunchMint) SetBuyerAccount(buyer ag_solanago.PublicKey) *FairlaunchMint {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(buyer).WRITE().SIGNER()
	return inst
}

// GetBuyerAccount gets the "buyer" account.
func (inst *FairlaunchMint) GetBuyerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetRequiredSignerAccount sets the "requiredSigner" account.
func (inst *FairlaunchMint) SetRequiredSignerAccount(requiredSigner ag_solanago.PublicKey) *FairlaunchMint {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(requiredSigner).SIGNER()
	return inst
}

// GetRequiredSignerAccount gets the "requiredSigner" account.
func (inst *FairlaunchMint) GetRequiredSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMachineAccount sets the "machine" account.
func (inst *FairlaunchMint) SetMachineAccount(machine ag_solanago.PublicKey) *FairlaunchMint {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(machine).WRITE()
	return inst
}

// GetMachineAccount gets the "machine" account.
func (inst *FairlaunchMint) GetMachineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMultipliersAccount sets the "multipliers" account.
func (inst *FairlaunchMint) SetMultipliersAccount(multipliers ag_solanago.PublicKey) *FairlaunchMint {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(multipliers)
	return inst
}

// GetMultipliersAccount gets the "multipliers" account.
func (inst *FairlaunchMint) GetMultipliersAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTotalMintsAccount sets the "totalMints" account.
func (inst *FairlaunchMint) SetTotalMintsAccount(totalMints ag_solanago.PublicKey) *FairlaunchMint {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(totalMints).WRITE()
	return inst
}

// GetTotalMintsAccount gets the "totalMints" account.
func (inst *FairlaunchMint) GetTotalMintsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetWalletAccount sets the "wallet" account.
func (inst *FairlaunchMint) SetWalletAccount(wallet ag_solanago.PublicKey) *FairlaunchMint {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(wallet).WRITE()
	return inst
}

// GetWalletAccount gets the "wallet" account.
func (inst *FairlaunchMint) GetWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetWallet2Account sets the "wallet2" account.
func (inst *FairlaunchMint) SetWallet2Account(wallet2 ag_solanago.PublicKey) *FairlaunchMint {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(wallet2).WRITE()
	return inst
}

// GetWallet2Account gets the "wallet2" account.
func (inst *FairlaunchMint) GetWallet2Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *FairlaunchMint) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *FairlaunchMint {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *FairlaunchMint) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetBuyerWlTokenWalletAccount sets the "buyerWlTokenWallet" account.
func (inst *FairlaunchMint) SetBuyerWlTokenWalletAccount(buyerWlTokenWallet ag_solanago.PublicKey) *FairlaunchMint {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(buyerWlTokenWallet).WRITE()
	return inst
}

// GetBuyerWlTokenWalletAccount gets the "buyerWlTokenWallet" account.
func (inst *FairlaunchMint) GetBuyerWlTokenWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetWlNftMetadataAccount sets the "wlNftMetadata" account.
func (inst *FairlaunchMint) SetWlNftMetadataAccount(wlNftMetadata ag_solanago.PublicKey) *FairlaunchMint {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(wlNftMetadata)
	return inst
}

// GetWlNftMetadataAccount gets the "wlNftMetadata" account.
func (inst *FairlaunchMint) GetWlNftMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetMintsPerWlNftAccount sets the "mintsPerWlNft" account.
func (inst *FairlaunchMint) SetMintsPerWlNftAccount(mintsPerWlNft ag_solanago.PublicKey) *FairlaunchMint {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(mintsPerWlNft).WRITE()
	return inst
}

// GetMintsPerWlNftAccount gets the "mintsPerWlNft" account.
func (inst *FairlaunchMint) GetMintsPerWlNftAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetWhitelistMintAccount sets the "whitelistMint" account.
func (inst *FairlaunchMint) SetWhitelistMintAccount(whitelistMint ag_solanago.PublicKey) *FairlaunchMint {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(whitelistMint).WRITE()
	return inst
}

// GetWhitelistMintAccount gets the "whitelistMint" account.
func (inst *FairlaunchMint) GetWhitelistMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetBuyerPaymentTokenWalletAccount sets the "buyerPaymentTokenWallet" account.
func (inst *FairlaunchMint) SetBuyerPaymentTokenWalletAccount(buyerPaymentTokenWallet ag_solanago.PublicKey) *FairlaunchMint {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(buyerPaymentTokenWallet).WRITE()
	return inst
}

// GetBuyerPaymentTokenWalletAccount gets the "buyerPaymentTokenWallet" account.
func (inst *FairlaunchMint) GetBuyerPaymentTokenWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetInstructionSysvarAccountAccount sets the "instructionSysvarAccount" account.
func (inst *FairlaunchMint) SetInstructionSysvarAccountAccount(instructionSysvarAccount ag_solanago.PublicKey) *FairlaunchMint {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(instructionSysvarAccount)
	return inst
}

// GetInstructionSysvarAccountAccount gets the "instructionSysvarAccount" account.
func (inst *FairlaunchMint) GetInstructionSysvarAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *FairlaunchMint) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *FairlaunchMint {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *FairlaunchMint) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetToken22ProgramAccount sets the "token22Program" account.
func (inst *FairlaunchMint) SetToken22ProgramAccount(token22Program ag_solanago.PublicKey) *FairlaunchMint {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(token22Program)
	return inst
}

// GetToken22ProgramAccount gets the "token22Program" account.
func (inst *FairlaunchMint) GetToken22ProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetTokenMetadataProgramAccount sets the "tokenMetadataProgram" account.
func (inst *FairlaunchMint) SetTokenMetadataProgramAccount(tokenMetadataProgram ag_solanago.PublicKey) *FairlaunchMint {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(tokenMetadataProgram)
	return inst
}

// GetTokenMetadataProgramAccount gets the "tokenMetadataProgram" account.
func (inst *FairlaunchMint) GetTokenMetadataProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

// SetAccountCompressionProgramAccount sets the "accountCompressionProgram" account.
func (inst *FairlaunchMint) SetAccountCompressionProgramAccount(accountCompressionProgram ag_solanago.PublicKey) *FairlaunchMint {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(accountCompressionProgram)
	return inst
}

// GetAccountCompressionProgramAccount gets the "accountCompressionProgram" account.
func (inst *FairlaunchMint) GetAccountCompressionProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(17)
}

// SetNoopProgramAccount sets the "noopProgram" account.
func (inst *FairlaunchMint) SetNoopProgramAccount(noopProgram ag_solanago.PublicKey) *FairlaunchMint {
	inst.AccountMetaSlice[18] = ag_solanago.Meta(noopProgram)
	return inst
}

// GetNoopProgramAccount gets the "noopProgram" account.
func (inst *FairlaunchMint) GetNoopProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(18)
}

// SetRecentSlothashesAccount sets the "recentSlothashes" account.
func (inst *FairlaunchMint) SetRecentSlothashesAccount(recentSlothashes ag_solanago.PublicKey) *FairlaunchMint {
	inst.AccountMetaSlice[19] = ag_solanago.Meta(recentSlothashes)
	return inst
}

// GetRecentSlothashesAccount gets the "recentSlothashes" account.
func (inst *FairlaunchMint) GetRecentSlothashesAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(19)
}

// SetBubblegumProgramAccount sets the "bubblegumProgram" account.
func (inst *FairlaunchMint) SetBubblegumProgramAccount(bubblegumProgram ag_solanago.PublicKey) *FairlaunchMint {
	inst.AccountMetaSlice[20] = ag_solanago.Meta(bubblegumProgram)
	return inst
}

// GetBubblegumProgramAccount gets the "bubblegumProgram" account.
func (inst *FairlaunchMint) GetBubblegumProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(20)
}

// SetWlNftTreeAccount sets the "wlNftTree" account.
func (inst *FairlaunchMint) SetWlNftTreeAccount(wlNftTree ag_solanago.PublicKey) *FairlaunchMint {
	inst.AccountMetaSlice[21] = ag_solanago.Meta(wlNftTree)
	return inst
}

// GetWlNftTreeAccount gets the "wlNftTree" account.
func (inst *FairlaunchMint) GetWlNftTreeAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(21)
}

// SetWlNftTreeAuthorityAccount sets the "wlNftTreeAuthority" account.
func (inst *FairlaunchMint) SetWlNftTreeAuthorityAccount(wlNftTreeAuthority ag_solanago.PublicKey) *FairlaunchMint {
	inst.AccountMetaSlice[22] = ag_solanago.Meta(wlNftTreeAuthority).WRITE()
	return inst
}

// GetWlNftTreeAuthorityAccount gets the "wlNftTreeAuthority" account.
func (inst *FairlaunchMint) GetWlNftTreeAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(22)
}

// SetDeploymentFungibleTokenAccountAccount sets the "deploymentFungibleTokenAccount" account.
func (inst *FairlaunchMint) SetDeploymentFungibleTokenAccountAccount(deploymentFungibleTokenAccount ag_solanago.PublicKey) *FairlaunchMint {
	inst.AccountMetaSlice[23] = ag_solanago.Meta(deploymentFungibleTokenAccount).WRITE()
	return inst
}

// GetDeploymentFungibleTokenAccountAccount gets the "deploymentFungibleTokenAccount" account.
func (inst *FairlaunchMint) GetDeploymentFungibleTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(23)
}

// SetDeploymentNonFungibleTokenAccountAccount sets the "deploymentNonFungibleTokenAccount" account.
func (inst *FairlaunchMint) SetDeploymentNonFungibleTokenAccountAccount(deploymentNonFungibleTokenAccount ag_solanago.PublicKey) *FairlaunchMint {
	inst.AccountMetaSlice[24] = ag_solanago.Meta(deploymentNonFungibleTokenAccount).WRITE()
	return inst
}

// GetDeploymentNonFungibleTokenAccountAccount gets the "deploymentNonFungibleTokenAccount" account.
func (inst *FairlaunchMint) GetDeploymentNonFungibleTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(24)
}

// SetDeploymentAccount sets the "deployment" account.
func (inst *FairlaunchMint) SetDeploymentAccount(deployment ag_solanago.PublicKey) *FairlaunchMint {
	inst.AccountMetaSlice[25] = ag_solanago.Meta(deployment).WRITE()
	return inst
}

// GetDeploymentAccount gets the "deployment" account.
func (inst *FairlaunchMint) GetDeploymentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(25)
}

// SetDeploymentConfigAccount sets the "deploymentConfig" account.
func (inst *FairlaunchMint) SetDeploymentConfigAccount(deploymentConfig ag_solanago.PublicKey) *FairlaunchMint {
	inst.AccountMetaSlice[26] = ag_solanago.Meta(deploymentConfig).WRITE()
	return inst
}

// GetDeploymentConfigAccount gets the "deploymentConfig" account.
func (inst *FairlaunchMint) GetDeploymentConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(26)
}

// SetHashlistAccount sets the "hashlist" account.
func (inst *FairlaunchMint) SetHashlistAccount(hashlist ag_solanago.PublicKey) *FairlaunchMint {
	inst.AccountMetaSlice[27] = ag_solanago.Meta(hashlist).WRITE()
	return inst
}

// GetHashlistAccount gets the "hashlist" account.
func (inst *FairlaunchMint) GetHashlistAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(27)
}

// SetHashlistMarkerAccount sets the "hashlistMarker" account.
func (inst *FairlaunchMint) SetHashlistMarkerAccount(hashlistMarker ag_solanago.PublicKey) *FairlaunchMint {
	inst.AccountMetaSlice[28] = ag_solanago.Meta(hashlistMarker).WRITE()
	return inst
}

// GetHashlistMarkerAccount gets the "hashlistMarker" account.
func (inst *FairlaunchMint) GetHashlistMarkerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(28)
}

// SetFungibleMintAccount sets the "fungibleMint" account.
func (inst *FairlaunchMint) SetFungibleMintAccount(fungibleMint ag_solanago.PublicKey) *FairlaunchMint {
	inst.AccountMetaSlice[29] = ag_solanago.Meta(fungibleMint).WRITE()
	return inst
}

// GetFungibleMintAccount gets the "fungibleMint" account.
func (inst *FairlaunchMint) GetFungibleMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(29)
}

// SetNonFungibleMintAccount sets the "nonFungibleMint" account.
func (inst *FairlaunchMint) SetNonFungibleMintAccount(nonFungibleMint ag_solanago.PublicKey) *FairlaunchMint {
	inst.AccountMetaSlice[30] = ag_solanago.Meta(nonFungibleMint).WRITE().SIGNER()
	return inst
}

// GetNonFungibleMintAccount gets the "nonFungibleMint" account.
func (inst *FairlaunchMint) GetNonFungibleMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(30)
}

// SetNonFungibleTokenAccountAccount sets the "nonFungibleTokenAccount" account.
func (inst *FairlaunchMint) SetNonFungibleTokenAccountAccount(nonFungibleTokenAccount ag_solanago.PublicKey) *FairlaunchMint {
	inst.AccountMetaSlice[31] = ag_solanago.Meta(nonFungibleTokenAccount).WRITE()
	return inst
}

// GetNonFungibleTokenAccountAccount gets the "nonFungibleTokenAccount" account.
func (inst *FairlaunchMint) GetNonFungibleTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(31)
}

// SetFairLaunchAccount sets the "fairLaunch" account.
func (inst *FairlaunchMint) SetFairLaunchAccount(fairLaunch ag_solanago.PublicKey) *FairlaunchMint {
	inst.AccountMetaSlice[32] = ag_solanago.Meta(fairLaunch)
	return inst
}

// GetFairLaunchAccount gets the "fairLaunch" account.
func (inst *FairlaunchMint) GetFairLaunchAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(32)
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *FairlaunchMint) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *FairlaunchMint {
	inst.AccountMetaSlice[33] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *FairlaunchMint) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(33)
}

// SetLibreplexRoyaltyHookAccount sets the "libreplexRoyaltyHook" account.
func (inst *FairlaunchMint) SetLibreplexRoyaltyHookAccount(libreplexRoyaltyHook ag_solanago.PublicKey) *FairlaunchMint {
	inst.AccountMetaSlice[34] = ag_solanago.Meta(libreplexRoyaltyHook)
	return inst
}

// GetLibreplexRoyaltyHookAccount gets the "libreplexRoyaltyHook" account.
func (inst *FairlaunchMint) GetLibreplexRoyaltyHookAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(34)
}

// SetRoyaltyHookExtraAccountMetaAccount sets the "royaltyHookExtraAccountMeta" account.
func (inst *FairlaunchMint) SetRoyaltyHookExtraAccountMetaAccount(royaltyHookExtraAccountMeta ag_solanago.PublicKey) *FairlaunchMint {
	inst.AccountMetaSlice[35] = ag_solanago.Meta(royaltyHookExtraAccountMeta).WRITE()
	return inst
}

// GetRoyaltyHookExtraAccountMetaAccount gets the "royaltyHookExtraAccountMeta" account.
func (inst *FairlaunchMint) GetRoyaltyHookExtraAccountMetaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(35)
}

func (inst FairlaunchMint) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_FairlaunchMint,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst FairlaunchMint) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *FairlaunchMint) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Input == nil {
			return errors.New("Input parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Buyer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.RequiredSigner is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Machine is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Multipliers is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TotalMints is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Wallet is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Wallet2 is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.BuyerWlTokenWallet is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.WlNftMetadata is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.MintsPerWlNft is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.WhitelistMint is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.BuyerPaymentTokenWallet is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.InstructionSysvarAccount is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.Token22Program is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.TokenMetadataProgram is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.AccountCompressionProgram is not set")
		}
		if inst.AccountMetaSlice[18] == nil {
			return errors.New("accounts.NoopProgram is not set")
		}
		if inst.AccountMetaSlice[19] == nil {
			return errors.New("accounts.RecentSlothashes is not set")
		}
		if inst.AccountMetaSlice[20] == nil {
			return errors.New("accounts.BubblegumProgram is not set")
		}
		if inst.AccountMetaSlice[21] == nil {
			return errors.New("accounts.WlNftTree is not set")
		}
		if inst.AccountMetaSlice[22] == nil {
			return errors.New("accounts.WlNftTreeAuthority is not set")
		}
		if inst.AccountMetaSlice[23] == nil {
			return errors.New("accounts.DeploymentFungibleTokenAccount is not set")
		}
		if inst.AccountMetaSlice[24] == nil {
			return errors.New("accounts.DeploymentNonFungibleTokenAccount is not set")
		}
		if inst.AccountMetaSlice[25] == nil {
			return errors.New("accounts.Deployment is not set")
		}
		if inst.AccountMetaSlice[26] == nil {
			return errors.New("accounts.DeploymentConfig is not set")
		}
		if inst.AccountMetaSlice[27] == nil {
			return errors.New("accounts.Hashlist is not set")
		}
		if inst.AccountMetaSlice[28] == nil {
			return errors.New("accounts.HashlistMarker is not set")
		}
		if inst.AccountMetaSlice[29] == nil {
			return errors.New("accounts.FungibleMint is not set")
		}
		if inst.AccountMetaSlice[30] == nil {
			return errors.New("accounts.NonFungibleMint is not set")
		}
		if inst.AccountMetaSlice[31] == nil {
			return errors.New("accounts.NonFungibleTokenAccount is not set")
		}
		if inst.AccountMetaSlice[32] == nil {
			return errors.New("accounts.FairLaunch is not set")
		}
		if inst.AccountMetaSlice[33] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[34] == nil {
			return errors.New("accounts.LibreplexRoyaltyHook is not set")
		}
		if inst.AccountMetaSlice[35] == nil {
			return errors.New("accounts.RoyaltyHookExtraAccountMeta is not set")
		}
	}
	return nil
}

func (inst *FairlaunchMint) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("FairlaunchMint")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Input", *inst.Input))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=36]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                      buyer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("             requiredSigner", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                    machine", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                multipliers", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                 totalMints", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                     wallet", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                    wallet2", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("              systemProgram", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("         buyerWlTokenWallet", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("              wlNftMetadata", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("              mintsPerWlNft", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("              whitelistMint", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("    buyerPaymentTokenWallet", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("          instructionSysvar", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("               tokenProgram", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("             token22Program", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("       tokenMetadataProgram", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("  accountCompressionProgram", inst.AccountMetaSlice.Get(17)))
						accountsBranch.Child(ag_format.Meta("                noopProgram", inst.AccountMetaSlice.Get(18)))
						accountsBranch.Child(ag_format.Meta("           recentSlothashes", inst.AccountMetaSlice.Get(19)))
						accountsBranch.Child(ag_format.Meta("           bubblegumProgram", inst.AccountMetaSlice.Get(20)))
						accountsBranch.Child(ag_format.Meta("                  wlNftTree", inst.AccountMetaSlice.Get(21)))
						accountsBranch.Child(ag_format.Meta("         wlNftTreeAuthority", inst.AccountMetaSlice.Get(22)))
						accountsBranch.Child(ag_format.Meta("    deploymentFungibleToken", inst.AccountMetaSlice.Get(23)))
						accountsBranch.Child(ag_format.Meta(" deploymentNonFungibleToken", inst.AccountMetaSlice.Get(24)))
						accountsBranch.Child(ag_format.Meta("                 deployment", inst.AccountMetaSlice.Get(25)))
						accountsBranch.Child(ag_format.Meta("           deploymentConfig", inst.AccountMetaSlice.Get(26)))
						accountsBranch.Child(ag_format.Meta("                   hashlist", inst.AccountMetaSlice.Get(27)))
						accountsBranch.Child(ag_format.Meta("             hashlistMarker", inst.AccountMetaSlice.Get(28)))
						accountsBranch.Child(ag_format.Meta("               fungibleMint", inst.AccountMetaSlice.Get(29)))
						accountsBranch.Child(ag_format.Meta("            nonFungibleMint", inst.AccountMetaSlice.Get(30)))
						accountsBranch.Child(ag_format.Meta("           nonFungibleToken", inst.AccountMetaSlice.Get(31)))
						accountsBranch.Child(ag_format.Meta("                 fairLaunch", inst.AccountMetaSlice.Get(32)))
						accountsBranch.Child(ag_format.Meta("     associatedTokenProgram", inst.AccountMetaSlice.Get(33)))
						accountsBranch.Child(ag_format.Meta("       libreplexRoyaltyHook", inst.AccountMetaSlice.Get(34)))
						accountsBranch.Child(ag_format.Meta("royaltyHookExtraAccountMeta", inst.AccountMetaSlice.Get(35)))
					})
				})
		})
}

func (obj FairlaunchMint) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Input` param:
	err = encoder.Encode(obj.Input)
	if err != nil {
		return err
	}
	return nil
}
func (obj *FairlaunchMint) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Input`:
	err = decoder.Decode(&obj.Input)
	if err != nil {
		return err
	}
	return nil
}

// NewFairlaunchMintInstruction declares a new FairlaunchMint instruction with the provided parameters and accounts.
func NewFairlaunchMintInstruction(
	// Parameters:
	input MachineMintInput,
	// Accounts:
	buyer ag_solanago.PublicKey,
	requiredSigner ag_solanago.PublicKey,
	machine ag_solanago.PublicKey,
	multipliers ag_solanago.PublicKey,
	totalMints ag_solanago.PublicKey,
	wallet ag_solanago.PublicKey,
	wallet2 ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	buyerWlTokenWallet ag_solanago.PublicKey,
	wlNftMetadata ag_solanago.PublicKey,
	mintsPerWlNft ag_solanago.PublicKey,
	whitelistMint ag_solanago.PublicKey,
	buyerPaymentTokenWallet ag_solanago.PublicKey,
	instructionSysvarAccount ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	token22Program ag_solanago.PublicKey,
	tokenMetadataProgram ag_solanago.PublicKey,
	accountCompressionProgram ag_solanago.PublicKey,
	noopProgram ag_solanago.PublicKey,
	recentSlothashes ag_solanago.PublicKey,
	bubblegumProgram ag_solanago.PublicKey,
	wlNftTree ag_solanago.PublicKey,
	wlNftTreeAuthority ag_solanago.PublicKey,
	deploymentFungibleTokenAccount ag_solanago.PublicKey,
	deploymentNonFungibleTokenAccount ag_solanago.PublicKey,
	deployment ag_solanago.PublicKey,
	deploymentConfig ag_solanago.PublicKey,
	hashlist ag_solanago.PublicKey,
	hashlistMarker ag_solanago.PublicKey,
	fungibleMint ag_solanago.PublicKey,
	nonFungibleMint ag_solanago.PublicKey,
	nonFungibleTokenAccount ag_solanago.PublicKey,
	fairLaunch ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	libreplexRoyaltyHook ag_solanago.PublicKey,
	royaltyHookExtraAccountMeta ag_solanago.PublicKey) *FairlaunchMint {
	return NewFairlaunchMintInstructionBuilder().
		SetInput(input).
		SetBuyerAccount(buyer).
		SetRequiredSignerAccount(requiredSigner).
		SetMachineAccount(machine).
		SetMultipliersAccount(multipliers).
		SetTotalMintsAccount(totalMints).
		SetWalletAccount(wallet).
		SetWallet2Account(wallet2).
		SetSystemProgramAccount(systemProgram).
		SetBuyerWlTokenWalletAccount(buyerWlTokenWallet).
		SetWlNftMetadataAccount(wlNftMetadata).
		SetMintsPerWlNftAccount(mintsPerWlNft).
		SetWhitelistMintAccount(whitelistMint).
		SetBuyerPaymentTokenWalletAccount(buyerPaymentTokenWallet).
		SetInstructionSysvarAccountAccount(instructionSysvarAccount).
		SetTokenProgramAccount(tokenProgram).
		SetToken22ProgramAccount(token22Program).
		SetTokenMetadataProgramAccount(tokenMetadataProgram).
		SetAccountCompressionProgramAccount(accountCompressionProgram).
		SetNoopProgramAccount(noopProgram).
		SetRecentSlothashesAccount(recentSlothashes).
		SetBubblegumProgramAccount(bubblegumProgram).
		SetWlNftTreeAccount(wlNftTree).
		SetWlNftTreeAuthorityAccount(wlNftTreeAuthority).
		SetDeploymentFungibleTokenAccountAccount(deploymentFungibleTokenAccount).
		SetDeploymentNonFungibleTokenAccountAccount(deploymentNonFungibleTokenAccount).
		SetDeploymentAccount(deployment).
		SetDeploymentConfigAccount(deploymentConfig).
		SetHashlistAccount(hashlist).
		SetHashlistMarkerAccount(hashlistMarker).
		SetFungibleMintAccount(fungibleMint).
		SetNonFungibleMintAccount(nonFungibleMint).
		SetNonFungibleTokenAccountAccount(nonFungibleTokenAccount).
		SetFairLaunchAccount(fairLaunch).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetLibreplexRoyaltyHookAccount(libreplexRoyaltyHook).
		SetRoyaltyHookExtraAccountMetaAccount(royaltyHookExtraAccountMeta)
}
