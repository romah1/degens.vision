// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package compressed_minter

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type Extensions struct {
	PriceLock      *uint64                `bin:"optional"`
	RequiredSigner *ag_solanago.PublicKey `bin:"optional"`
	Flags          [200]uint8
}

var ExtensionsDiscriminator = [8]byte{243, 215, 49, 207, 31, 104, 238, 130}

func (obj Extensions) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(ExtensionsDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `PriceLock` param (optional):
	{
		if obj.PriceLock == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.PriceLock)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `RequiredSigner` param (optional):
	{
		if obj.RequiredSigner == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.RequiredSigner)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Flags` param:
	err = encoder.Encode(obj.Flags)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Extensions) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(ExtensionsDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[243 215 49 207 31 104 238 130]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `PriceLock` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.PriceLock)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `RequiredSigner` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.RequiredSigner)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Flags`:
	err = decoder.Decode(&obj.Flags)
	if err != nil {
		return err
	}
	return nil
}

type Minter struct {
	Bump                 uint8
	Seed                 ag_solanago.PublicKey
	Authority            ag_solanago.PublicKey
	Ordered              bool
	Name                 string
	Url                  string
	Symbol               string
	Creators             []Creator
	SellerFeeBasisPoints uint16
	Supply               uint32
	Sold                 uint32
	Collection           ag_solanago.PublicKey
	SalePhases           []SaleFaze
}

var MinterDiscriminator = [8]byte{28, 69, 107, 166, 41, 139, 205, 247}

func (obj Minter) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(MinterDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Seed` param:
	err = encoder.Encode(obj.Seed)
	if err != nil {
		return err
	}
	// Serialize `Authority` param:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return err
	}
	// Serialize `Ordered` param:
	err = encoder.Encode(obj.Ordered)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Url` param:
	err = encoder.Encode(obj.Url)
	if err != nil {
		return err
	}
	// Serialize `Symbol` param:
	err = encoder.Encode(obj.Symbol)
	if err != nil {
		return err
	}
	// Serialize `Creators` param:
	err = encoder.Encode(obj.Creators)
	if err != nil {
		return err
	}
	// Serialize `SellerFeeBasisPoints` param:
	err = encoder.Encode(obj.SellerFeeBasisPoints)
	if err != nil {
		return err
	}
	// Serialize `Supply` param:
	err = encoder.Encode(obj.Supply)
	if err != nil {
		return err
	}
	// Serialize `Sold` param:
	err = encoder.Encode(obj.Sold)
	if err != nil {
		return err
	}
	// Serialize `Collection` param:
	err = encoder.Encode(obj.Collection)
	if err != nil {
		return err
	}
	// Serialize `SalePhases` param:
	err = encoder.Encode(obj.SalePhases)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Minter) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(MinterDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[28 69 107 166 41 139 205 247]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Seed`:
	err = decoder.Decode(&obj.Seed)
	if err != nil {
		return err
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return err
	}
	// Deserialize `Ordered`:
	err = decoder.Decode(&obj.Ordered)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Url`:
	err = decoder.Decode(&obj.Url)
	if err != nil {
		return err
	}
	// Deserialize `Symbol`:
	err = decoder.Decode(&obj.Symbol)
	if err != nil {
		return err
	}
	// Deserialize `Creators`:
	err = decoder.Decode(&obj.Creators)
	if err != nil {
		return err
	}
	// Deserialize `SellerFeeBasisPoints`:
	err = decoder.Decode(&obj.SellerFeeBasisPoints)
	if err != nil {
		return err
	}
	// Deserialize `Supply`:
	err = decoder.Decode(&obj.Supply)
	if err != nil {
		return err
	}
	// Deserialize `Sold`:
	err = decoder.Decode(&obj.Sold)
	if err != nil {
		return err
	}
	// Deserialize `Collection`:
	err = decoder.Decode(&obj.Collection)
	if err != nil {
		return err
	}
	// Deserialize `SalePhases`:
	err = decoder.Decode(&obj.SalePhases)
	if err != nil {
		return err
	}
	return nil
}

type Multipliers struct{}

var MultipliersDiscriminator = [8]byte{129, 233, 66, 228, 168, 129, 38, 204}

func (obj Multipliers) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(MultipliersDiscriminator[:], false)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Multipliers) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(MultipliersDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[129 233 66 228 168 129 38 204]",
				fmt.Sprint(discriminator[:]))
		}
	}
	return nil
}

type MintMachine struct {
	Bump            uint8
	Seed            ag_solanago.PublicKey
	TableSlot       uint64
	Data            MachineData
	Sold            uint32
	MachineType     MachineType
	RoyaltyEnforced uint8
	Frozen          uint8
	Padding         [62]uint8
	SalePhases      []MachinePhase
	FundReceivers   []Creator
}

var MintMachineDiscriminator = [8]byte{108, 44, 249, 190, 21, 18, 27, 127}

func (obj MintMachine) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(MintMachineDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Seed` param:
	err = encoder.Encode(obj.Seed)
	if err != nil {
		return err
	}
	// Serialize `TableSlot` param:
	err = encoder.Encode(obj.TableSlot)
	if err != nil {
		return err
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	// Serialize `Sold` param:
	err = encoder.Encode(obj.Sold)
	if err != nil {
		return err
	}
	// Serialize `MachineType` param:
	{
		tmp := machineTypeContainer{}
		switch realvalue := obj.MachineType.(type) {
		case *MachineTypeCompressed:
			tmp.Enum = 0
			tmp.Compressed = *realvalue
		case *MachineTypeFairLaunch:
			tmp.Enum = 1
			tmp.FairLaunch = *realvalue
		case *MachineTypeLiquid:
			tmp.Enum = 2
			tmp.Liquid = *realvalue
		case *MachineTypeCore:
			tmp.Enum = 3
			tmp.Core = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	// Serialize `RoyaltyEnforced` param:
	err = encoder.Encode(obj.RoyaltyEnforced)
	if err != nil {
		return err
	}
	// Serialize `Frozen` param:
	err = encoder.Encode(obj.Frozen)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `SalePhases` param:
	err = encoder.Encode(obj.SalePhases)
	if err != nil {
		return err
	}
	// Serialize `FundReceivers` param:
	err = encoder.Encode(obj.FundReceivers)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MintMachine) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(MintMachineDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[108 44 249 190 21 18 27 127]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Seed`:
	err = decoder.Decode(&obj.Seed)
	if err != nil {
		return err
	}
	// Deserialize `TableSlot`:
	err = decoder.Decode(&obj.TableSlot)
	if err != nil {
		return err
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	// Deserialize `Sold`:
	err = decoder.Decode(&obj.Sold)
	if err != nil {
		return err
	}
	// Deserialize `MachineType`:
	{
		tmp := new(machineTypeContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.MachineType = &tmp.Compressed
		case 1:
			obj.MachineType = &tmp.FairLaunch
		case 2:
			obj.MachineType = &tmp.Liquid
		case 3:
			obj.MachineType = &tmp.Core
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	// Deserialize `RoyaltyEnforced`:
	err = decoder.Decode(&obj.RoyaltyEnforced)
	if err != nil {
		return err
	}
	// Deserialize `Frozen`:
	err = decoder.Decode(&obj.Frozen)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `SalePhases`:
	err = decoder.Decode(&obj.SalePhases)
	if err != nil {
		return err
	}
	// Deserialize `FundReceivers`:
	err = decoder.Decode(&obj.FundReceivers)
	if err != nil {
		return err
	}
	return nil
}

type TotalMints struct {
	Total uint32
}

var TotalMintsDiscriminator = [8]byte{5, 252, 73, 108, 50, 30, 212, 224}

func (obj TotalMints) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(TotalMintsDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Total` param:
	err = encoder.Encode(obj.Total)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TotalMints) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(TotalMintsDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[5 252 73 108 50 30 212 224]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Total`:
	err = decoder.Decode(&obj.Total)
	if err != nil {
		return err
	}
	return nil
}

type NameBank struct {
	Minter ag_solanago.PublicKey
}

var NameBankDiscriminator = [8]byte{232, 241, 89, 8, 189, 80, 47, 63}

func (obj NameBank) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(NameBankDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Minter` param:
	err = encoder.Encode(obj.Minter)
	if err != nil {
		return err
	}
	return nil
}

func (obj *NameBank) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(NameBankDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[232 241 89 8 189 80 47 63]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Minter`:
	err = decoder.Decode(&obj.Minter)
	if err != nil {
		return err
	}
	return nil
}

type FazeState struct {
	Mints    uint32
	MaxMints *uint32 `bin:"optional"`
	EndTime  *int64  `bin:"optional"`
	Padding  [24]uint8
}

var FazeStateDiscriminator = [8]byte{39, 78, 149, 43, 212, 150, 150, 37}

func (obj FazeState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(FazeStateDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Mints` param:
	err = encoder.Encode(obj.Mints)
	if err != nil {
		return err
	}
	// Serialize `MaxMints` param (optional):
	{
		if obj.MaxMints == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MaxMints)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `EndTime` param (optional):
	{
		if obj.EndTime == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.EndTime)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FazeState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(FazeStateDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[39 78 149 43 212 150 150 37]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Mints`:
	err = decoder.Decode(&obj.Mints)
	if err != nil {
		return err
	}
	// Deserialize `MaxMints` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MaxMints)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `EndTime` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.EndTime)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}
