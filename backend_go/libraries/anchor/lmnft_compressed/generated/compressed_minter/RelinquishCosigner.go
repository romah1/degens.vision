// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package compressed_minter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// RelinquishCosigner is the `relinquishCosigner` instruction.
type RelinquishCosigner struct {

	// [0] = [SIGNER] authority
	//
	// [1] = [WRITE] machine
	//
	// [2] = [WRITE, SIGNER] payer
	//
	// [3] = [WRITE] deployment
	//
	// [4] = [] systemProgram
	//
	// [5] = [] fairLaunch
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewRelinquishCosignerInstructionBuilder creates a new `RelinquishCosigner` instruction builder.
func NewRelinquishCosignerInstructionBuilder() *RelinquishCosigner {
	nd := &RelinquishCosigner{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetAuthorityAccount sets the "authority" account.
func (inst *RelinquishCosigner) SetAuthorityAccount(authority ag_solanago.PublicKey) *RelinquishCosigner {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *RelinquishCosigner) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMachineAccount sets the "machine" account.
func (inst *RelinquishCosigner) SetMachineAccount(machine ag_solanago.PublicKey) *RelinquishCosigner {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(machine).WRITE()
	return inst
}

// GetMachineAccount gets the "machine" account.
func (inst *RelinquishCosigner) GetMachineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPayerAccount sets the "payer" account.
func (inst *RelinquishCosigner) SetPayerAccount(payer ag_solanago.PublicKey) *RelinquishCosigner {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *RelinquishCosigner) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetDeploymentAccount sets the "deployment" account.
func (inst *RelinquishCosigner) SetDeploymentAccount(deployment ag_solanago.PublicKey) *RelinquishCosigner {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(deployment).WRITE()
	return inst
}

// GetDeploymentAccount gets the "deployment" account.
func (inst *RelinquishCosigner) GetDeploymentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *RelinquishCosigner) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *RelinquishCosigner {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *RelinquishCosigner) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetFairLaunchAccount sets the "fairLaunch" account.
func (inst *RelinquishCosigner) SetFairLaunchAccount(fairLaunch ag_solanago.PublicKey) *RelinquishCosigner {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(fairLaunch)
	return inst
}

// GetFairLaunchAccount gets the "fairLaunch" account.
func (inst *RelinquishCosigner) GetFairLaunchAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst RelinquishCosigner) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_RelinquishCosigner,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst RelinquishCosigner) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *RelinquishCosigner) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Machine is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Deployment is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.FairLaunch is not set")
		}
	}
	return nil
}

func (inst *RelinquishCosigner) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("RelinquishCosigner")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("    authority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("      machine", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("        payer", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("   deployment", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("   fairLaunch", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj RelinquishCosigner) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *RelinquishCosigner) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewRelinquishCosignerInstruction declares a new RelinquishCosigner instruction with the provided parameters and accounts.
func NewRelinquishCosignerInstruction(
	// Accounts:
	authority ag_solanago.PublicKey,
	machine ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	deployment ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	fairLaunch ag_solanago.PublicKey) *RelinquishCosigner {
	return NewRelinquishCosignerInstructionBuilder().
		SetAuthorityAccount(authority).
		SetMachineAccount(machine).
		SetPayerAccount(payer).
		SetDeploymentAccount(deployment).
		SetSystemProgramAccount(systemProgram).
		SetFairLaunchAccount(fairLaunch)
}
