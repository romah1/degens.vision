// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package compressed_minter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// MintV2 is the `mintV2` instruction.
type MintV2 struct {
	MintInput   *MintInput
	Entry       *CNFTWhitelistEntry `bin:"optional"`
	ToggleState *uint8

	// [0] = [WRITE, SIGNER] buyer
	//
	// [1] = [SIGNER] requiredSigner
	//
	// [2] = [WRITE] minter
	//
	// [3] = [WRITE] nameBank
	//
	// [4] = [] fazeState
	//
	// [5] = [] extension
	//
	// [6] = [WRITE] totalMints
	//
	// [7] = [] treeAdmin
	//
	// [8] = [WRITE] wallet
	//
	// [9] = [WRITE] wallet2
	//
	// [10] = [] systemProgram
	//
	// [11] = [WRITE] buyerWlTokenWallet
	//
	// [12] = [] wlNftMetadata
	//
	// [13] = [WRITE] mintsPerWlNft
	//
	// [14] = [WRITE] whitelistMint
	//
	// [15] = [WRITE] buyerPaymentTokenWallet
	//
	// [16] = [] instructionSysvarAccount
	//
	// [17] = [] collectionMint
	//
	// [18] = [WRITE] collectionMetadata
	//
	// [19] = [] collectionMasterEdition
	//
	// [20] = [] collectionAuthorityRecord
	//
	// [21] = [] bubblegumSigner
	//
	// [22] = [WRITE] treeAuthority
	//
	// [23] = [] tokenProgram
	//
	// [24] = [] tokenMetadataProgram
	//
	// [25] = [] accountCompressionProgram
	//
	// [26] = [] noopProgram
	//
	// [27] = [] recentSlothashes
	//
	// [28] = [] bubblegumProgram
	//
	// [29] = [] wlNftTree
	//
	// [30] = [WRITE] tree
	//
	// [31] = [WRITE] wlNftTreeAuthority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMintV2InstructionBuilder creates a new `MintV2` instruction builder.
func NewMintV2InstructionBuilder() *MintV2 {
	nd := &MintV2{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 32),
	}
	return nd
}

// SetMintInput sets the "mintInput" parameter.
func (inst *MintV2) SetMintInput(mintInput MintInput) *MintV2 {
	inst.MintInput = &mintInput
	return inst
}

// SetEntry sets the "entry" parameter.
func (inst *MintV2) SetEntry(entry CNFTWhitelistEntry) *MintV2 {
	inst.Entry = &entry
	return inst
}

// SetToggleState sets the "toggleState" parameter.
func (inst *MintV2) SetToggleState(toggleState uint8) *MintV2 {
	inst.ToggleState = &toggleState
	return inst
}

// SetBuyerAccount sets the "buyer" account.
func (inst *MintV2) SetBuyerAccount(buyer ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(buyer).WRITE().SIGNER()
	return inst
}

// GetBuyerAccount gets the "buyer" account.
func (inst *MintV2) GetBuyerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetRequiredSignerAccount sets the "requiredSigner" account.
func (inst *MintV2) SetRequiredSignerAccount(requiredSigner ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(requiredSigner).SIGNER()
	return inst
}

// GetRequiredSignerAccount gets the "requiredSigner" account.
func (inst *MintV2) GetRequiredSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMinterAccount sets the "minter" account.
func (inst *MintV2) SetMinterAccount(minter ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(minter).WRITE()
	return inst
}

// GetMinterAccount gets the "minter" account.
func (inst *MintV2) GetMinterAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetNameBankAccount sets the "nameBank" account.
func (inst *MintV2) SetNameBankAccount(nameBank ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(nameBank).WRITE()
	return inst
}

// GetNameBankAccount gets the "nameBank" account.
func (inst *MintV2) GetNameBankAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetFazeStateAccount sets the "fazeState" account.
func (inst *MintV2) SetFazeStateAccount(fazeState ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(fazeState)
	return inst
}

// GetFazeStateAccount gets the "fazeState" account.
func (inst *MintV2) GetFazeStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetExtensionAccount sets the "extension" account.
func (inst *MintV2) SetExtensionAccount(extension ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(extension)
	return inst
}

// GetExtensionAccount gets the "extension" account.
func (inst *MintV2) GetExtensionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTotalMintsAccount sets the "totalMints" account.
func (inst *MintV2) SetTotalMintsAccount(totalMints ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(totalMints).WRITE()
	return inst
}

// GetTotalMintsAccount gets the "totalMints" account.
func (inst *MintV2) GetTotalMintsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTreeAdminAccount sets the "treeAdmin" account.
func (inst *MintV2) SetTreeAdminAccount(treeAdmin ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(treeAdmin)
	return inst
}

// GetTreeAdminAccount gets the "treeAdmin" account.
func (inst *MintV2) GetTreeAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetWalletAccount sets the "wallet" account.
func (inst *MintV2) SetWalletAccount(wallet ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(wallet).WRITE()
	return inst
}

// GetWalletAccount gets the "wallet" account.
func (inst *MintV2) GetWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetWallet2Account sets the "wallet2" account.
func (inst *MintV2) SetWallet2Account(wallet2 ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(wallet2).WRITE()
	return inst
}

// GetWallet2Account gets the "wallet2" account.
func (inst *MintV2) GetWallet2Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *MintV2) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *MintV2) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetBuyerWlTokenWalletAccount sets the "buyerWlTokenWallet" account.
func (inst *MintV2) SetBuyerWlTokenWalletAccount(buyerWlTokenWallet ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(buyerWlTokenWallet).WRITE()
	return inst
}

// GetBuyerWlTokenWalletAccount gets the "buyerWlTokenWallet" account.
func (inst *MintV2) GetBuyerWlTokenWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetWlNftMetadataAccount sets the "wlNftMetadata" account.
func (inst *MintV2) SetWlNftMetadataAccount(wlNftMetadata ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(wlNftMetadata)
	return inst
}

// GetWlNftMetadataAccount gets the "wlNftMetadata" account.
func (inst *MintV2) GetWlNftMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetMintsPerWlNftAccount sets the "mintsPerWlNft" account.
func (inst *MintV2) SetMintsPerWlNftAccount(mintsPerWlNft ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(mintsPerWlNft).WRITE()
	return inst
}

// GetMintsPerWlNftAccount gets the "mintsPerWlNft" account.
func (inst *MintV2) GetMintsPerWlNftAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetWhitelistMintAccount sets the "whitelistMint" account.
func (inst *MintV2) SetWhitelistMintAccount(whitelistMint ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(whitelistMint).WRITE()
	return inst
}

// GetWhitelistMintAccount gets the "whitelistMint" account.
func (inst *MintV2) GetWhitelistMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetBuyerPaymentTokenWalletAccount sets the "buyerPaymentTokenWallet" account.
func (inst *MintV2) SetBuyerPaymentTokenWalletAccount(buyerPaymentTokenWallet ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(buyerPaymentTokenWallet).WRITE()
	return inst
}

// GetBuyerPaymentTokenWalletAccount gets the "buyerPaymentTokenWallet" account.
func (inst *MintV2) GetBuyerPaymentTokenWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetInstructionSysvarAccountAccount sets the "instructionSysvarAccount" account.
func (inst *MintV2) SetInstructionSysvarAccountAccount(instructionSysvarAccount ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(instructionSysvarAccount)
	return inst
}

// GetInstructionSysvarAccountAccount gets the "instructionSysvarAccount" account.
func (inst *MintV2) GetInstructionSysvarAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

// SetCollectionMintAccount sets the "collectionMint" account.
func (inst *MintV2) SetCollectionMintAccount(collectionMint ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(collectionMint)
	return inst
}

// GetCollectionMintAccount gets the "collectionMint" account.
func (inst *MintV2) GetCollectionMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(17)
}

// SetCollectionMetadataAccount sets the "collectionMetadata" account.
func (inst *MintV2) SetCollectionMetadataAccount(collectionMetadata ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[18] = ag_solanago.Meta(collectionMetadata).WRITE()
	return inst
}

// GetCollectionMetadataAccount gets the "collectionMetadata" account.
func (inst *MintV2) GetCollectionMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(18)
}

// SetCollectionMasterEditionAccount sets the "collectionMasterEdition" account.
func (inst *MintV2) SetCollectionMasterEditionAccount(collectionMasterEdition ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[19] = ag_solanago.Meta(collectionMasterEdition)
	return inst
}

// GetCollectionMasterEditionAccount gets the "collectionMasterEdition" account.
func (inst *MintV2) GetCollectionMasterEditionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(19)
}

// SetCollectionAuthorityRecordAccount sets the "collectionAuthorityRecord" account.
func (inst *MintV2) SetCollectionAuthorityRecordAccount(collectionAuthorityRecord ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[20] = ag_solanago.Meta(collectionAuthorityRecord)
	return inst
}

// GetCollectionAuthorityRecordAccount gets the "collectionAuthorityRecord" account.
func (inst *MintV2) GetCollectionAuthorityRecordAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(20)
}

// SetBubblegumSignerAccount sets the "bubblegumSigner" account.
func (inst *MintV2) SetBubblegumSignerAccount(bubblegumSigner ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[21] = ag_solanago.Meta(bubblegumSigner)
	return inst
}

// GetBubblegumSignerAccount gets the "bubblegumSigner" account.
func (inst *MintV2) GetBubblegumSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(21)
}

// SetTreeAuthorityAccount sets the "treeAuthority" account.
func (inst *MintV2) SetTreeAuthorityAccount(treeAuthority ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[22] = ag_solanago.Meta(treeAuthority).WRITE()
	return inst
}

// GetTreeAuthorityAccount gets the "treeAuthority" account.
func (inst *MintV2) GetTreeAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(22)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *MintV2) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[23] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *MintV2) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(23)
}

// SetTokenMetadataProgramAccount sets the "tokenMetadataProgram" account.
func (inst *MintV2) SetTokenMetadataProgramAccount(tokenMetadataProgram ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[24] = ag_solanago.Meta(tokenMetadataProgram)
	return inst
}

// GetTokenMetadataProgramAccount gets the "tokenMetadataProgram" account.
func (inst *MintV2) GetTokenMetadataProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(24)
}

// SetAccountCompressionProgramAccount sets the "accountCompressionProgram" account.
func (inst *MintV2) SetAccountCompressionProgramAccount(accountCompressionProgram ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[25] = ag_solanago.Meta(accountCompressionProgram)
	return inst
}

// GetAccountCompressionProgramAccount gets the "accountCompressionProgram" account.
func (inst *MintV2) GetAccountCompressionProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(25)
}

// SetNoopProgramAccount sets the "noopProgram" account.
func (inst *MintV2) SetNoopProgramAccount(noopProgram ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[26] = ag_solanago.Meta(noopProgram)
	return inst
}

// GetNoopProgramAccount gets the "noopProgram" account.
func (inst *MintV2) GetNoopProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(26)
}

// SetRecentSlothashesAccount sets the "recentSlothashes" account.
func (inst *MintV2) SetRecentSlothashesAccount(recentSlothashes ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[27] = ag_solanago.Meta(recentSlothashes)
	return inst
}

// GetRecentSlothashesAccount gets the "recentSlothashes" account.
func (inst *MintV2) GetRecentSlothashesAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(27)
}

// SetBubblegumProgramAccount sets the "bubblegumProgram" account.
func (inst *MintV2) SetBubblegumProgramAccount(bubblegumProgram ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[28] = ag_solanago.Meta(bubblegumProgram)
	return inst
}

// GetBubblegumProgramAccount gets the "bubblegumProgram" account.
func (inst *MintV2) GetBubblegumProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(28)
}

// SetWlNftTreeAccount sets the "wlNftTree" account.
func (inst *MintV2) SetWlNftTreeAccount(wlNftTree ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[29] = ag_solanago.Meta(wlNftTree)
	return inst
}

// GetWlNftTreeAccount gets the "wlNftTree" account.
func (inst *MintV2) GetWlNftTreeAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(29)
}

// SetTreeAccount sets the "tree" account.
func (inst *MintV2) SetTreeAccount(tree ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[30] = ag_solanago.Meta(tree).WRITE()
	return inst
}

// GetTreeAccount gets the "tree" account.
func (inst *MintV2) GetTreeAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(30)
}

// SetWlNftTreeAuthorityAccount sets the "wlNftTreeAuthority" account.
func (inst *MintV2) SetWlNftTreeAuthorityAccount(wlNftTreeAuthority ag_solanago.PublicKey) *MintV2 {
	inst.AccountMetaSlice[31] = ag_solanago.Meta(wlNftTreeAuthority).WRITE()
	return inst
}

// GetWlNftTreeAuthorityAccount gets the "wlNftTreeAuthority" account.
func (inst *MintV2) GetWlNftTreeAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(31)
}

func (inst MintV2) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MintV2,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MintV2) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MintV2) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.MintInput == nil {
			return errors.New("MintInput parameter is not set")
		}
		if inst.ToggleState == nil {
			return errors.New("ToggleState parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Buyer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.RequiredSigner is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Minter is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.NameBank is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.FazeState is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Extension is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TotalMints is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TreeAdmin is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Wallet is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Wallet2 is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.BuyerWlTokenWallet is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.WlNftMetadata is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.MintsPerWlNft is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.WhitelistMint is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.BuyerPaymentTokenWallet is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.InstructionSysvarAccount is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.CollectionMint is not set")
		}
		if inst.AccountMetaSlice[18] == nil {
			return errors.New("accounts.CollectionMetadata is not set")
		}
		if inst.AccountMetaSlice[19] == nil {
			return errors.New("accounts.CollectionMasterEdition is not set")
		}
		if inst.AccountMetaSlice[20] == nil {
			return errors.New("accounts.CollectionAuthorityRecord is not set")
		}
		if inst.AccountMetaSlice[21] == nil {
			return errors.New("accounts.BubblegumSigner is not set")
		}
		if inst.AccountMetaSlice[22] == nil {
			return errors.New("accounts.TreeAuthority is not set")
		}
		if inst.AccountMetaSlice[23] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[24] == nil {
			return errors.New("accounts.TokenMetadataProgram is not set")
		}
		if inst.AccountMetaSlice[25] == nil {
			return errors.New("accounts.AccountCompressionProgram is not set")
		}
		if inst.AccountMetaSlice[26] == nil {
			return errors.New("accounts.NoopProgram is not set")
		}
		if inst.AccountMetaSlice[27] == nil {
			return errors.New("accounts.RecentSlothashes is not set")
		}
		if inst.AccountMetaSlice[28] == nil {
			return errors.New("accounts.BubblegumProgram is not set")
		}
		if inst.AccountMetaSlice[29] == nil {
			return errors.New("accounts.WlNftTree is not set")
		}
		if inst.AccountMetaSlice[30] == nil {
			return errors.New("accounts.Tree is not set")
		}
		if inst.AccountMetaSlice[31] == nil {
			return errors.New("accounts.WlNftTreeAuthority is not set")
		}
	}
	return nil
}

func (inst *MintV2) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MintV2")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  MintInput", *inst.MintInput))
						paramsBranch.Child(ag_format.Param("      Entry (OPT)", inst.Entry))
						paramsBranch.Child(ag_format.Param("ToggleState", *inst.ToggleState))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=32]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                    buyer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("           requiredSigner", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                   minter", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                 nameBank", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                fazeState", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                extension", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("               totalMints", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("                treeAdmin", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                   wallet", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("                  wallet2", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("            systemProgram", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("       buyerWlTokenWallet", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("            wlNftMetadata", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("            mintsPerWlNft", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("            whitelistMint", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("  buyerPaymentTokenWallet", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("        instructionSysvar", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("           collectionMint", inst.AccountMetaSlice.Get(17)))
						accountsBranch.Child(ag_format.Meta("       collectionMetadata", inst.AccountMetaSlice.Get(18)))
						accountsBranch.Child(ag_format.Meta("  collectionMasterEdition", inst.AccountMetaSlice.Get(19)))
						accountsBranch.Child(ag_format.Meta("collectionAuthorityRecord", inst.AccountMetaSlice.Get(20)))
						accountsBranch.Child(ag_format.Meta("          bubblegumSigner", inst.AccountMetaSlice.Get(21)))
						accountsBranch.Child(ag_format.Meta("            treeAuthority", inst.AccountMetaSlice.Get(22)))
						accountsBranch.Child(ag_format.Meta("             tokenProgram", inst.AccountMetaSlice.Get(23)))
						accountsBranch.Child(ag_format.Meta("     tokenMetadataProgram", inst.AccountMetaSlice.Get(24)))
						accountsBranch.Child(ag_format.Meta("accountCompressionProgram", inst.AccountMetaSlice.Get(25)))
						accountsBranch.Child(ag_format.Meta("              noopProgram", inst.AccountMetaSlice.Get(26)))
						accountsBranch.Child(ag_format.Meta("         recentSlothashes", inst.AccountMetaSlice.Get(27)))
						accountsBranch.Child(ag_format.Meta("         bubblegumProgram", inst.AccountMetaSlice.Get(28)))
						accountsBranch.Child(ag_format.Meta("                wlNftTree", inst.AccountMetaSlice.Get(29)))
						accountsBranch.Child(ag_format.Meta("                     tree", inst.AccountMetaSlice.Get(30)))
						accountsBranch.Child(ag_format.Meta("       wlNftTreeAuthority", inst.AccountMetaSlice.Get(31)))
					})
				})
		})
}

func (obj MintV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MintInput` param:
	err = encoder.Encode(obj.MintInput)
	if err != nil {
		return err
	}
	// Serialize `Entry` param (optional):
	{
		if obj.Entry == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Entry)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `ToggleState` param:
	err = encoder.Encode(obj.ToggleState)
	if err != nil {
		return err
	}
	return nil
}
func (obj *MintV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MintInput`:
	err = decoder.Decode(&obj.MintInput)
	if err != nil {
		return err
	}
	// Deserialize `Entry` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Entry)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `ToggleState`:
	err = decoder.Decode(&obj.ToggleState)
	if err != nil {
		return err
	}
	return nil
}

// NewMintV2Instruction declares a new MintV2 instruction with the provided parameters and accounts.
func NewMintV2Instruction(
	// Parameters:
	mintInput MintInput,
	entry CNFTWhitelistEntry,
	toggleState uint8,
	// Accounts:
	buyer ag_solanago.PublicKey,
	requiredSigner ag_solanago.PublicKey,
	minter ag_solanago.PublicKey,
	nameBank ag_solanago.PublicKey,
	fazeState ag_solanago.PublicKey,
	extension ag_solanago.PublicKey,
	totalMints ag_solanago.PublicKey,
	treeAdmin ag_solanago.PublicKey,
	wallet ag_solanago.PublicKey,
	wallet2 ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	buyerWlTokenWallet ag_solanago.PublicKey,
	wlNftMetadata ag_solanago.PublicKey,
	mintsPerWlNft ag_solanago.PublicKey,
	whitelistMint ag_solanago.PublicKey,
	buyerPaymentTokenWallet ag_solanago.PublicKey,
	instructionSysvarAccount ag_solanago.PublicKey,
	collectionMint ag_solanago.PublicKey,
	collectionMetadata ag_solanago.PublicKey,
	collectionMasterEdition ag_solanago.PublicKey,
	collectionAuthorityRecord ag_solanago.PublicKey,
	bubblegumSigner ag_solanago.PublicKey,
	treeAuthority ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	tokenMetadataProgram ag_solanago.PublicKey,
	accountCompressionProgram ag_solanago.PublicKey,
	noopProgram ag_solanago.PublicKey,
	recentSlothashes ag_solanago.PublicKey,
	bubblegumProgram ag_solanago.PublicKey,
	wlNftTree ag_solanago.PublicKey,
	tree ag_solanago.PublicKey,
	wlNftTreeAuthority ag_solanago.PublicKey) *MintV2 {
	return NewMintV2InstructionBuilder().
		SetMintInput(mintInput).
		SetEntry(entry).
		SetToggleState(toggleState).
		SetBuyerAccount(buyer).
		SetRequiredSignerAccount(requiredSigner).
		SetMinterAccount(minter).
		SetNameBankAccount(nameBank).
		SetFazeStateAccount(fazeState).
		SetExtensionAccount(extension).
		SetTotalMintsAccount(totalMints).
		SetTreeAdminAccount(treeAdmin).
		SetWalletAccount(wallet).
		SetWallet2Account(wallet2).
		SetSystemProgramAccount(systemProgram).
		SetBuyerWlTokenWalletAccount(buyerWlTokenWallet).
		SetWlNftMetadataAccount(wlNftMetadata).
		SetMintsPerWlNftAccount(mintsPerWlNft).
		SetWhitelistMintAccount(whitelistMint).
		SetBuyerPaymentTokenWalletAccount(buyerPaymentTokenWallet).
		SetInstructionSysvarAccountAccount(instructionSysvarAccount).
		SetCollectionMintAccount(collectionMint).
		SetCollectionMetadataAccount(collectionMetadata).
		SetCollectionMasterEditionAccount(collectionMasterEdition).
		SetCollectionAuthorityRecordAccount(collectionAuthorityRecord).
		SetBubblegumSignerAccount(bubblegumSigner).
		SetTreeAuthorityAccount(treeAuthority).
		SetTokenProgramAccount(tokenProgram).
		SetTokenMetadataProgramAccount(tokenMetadataProgram).
		SetAccountCompressionProgramAccount(accountCompressionProgram).
		SetNoopProgramAccount(noopProgram).
		SetRecentSlothashesAccount(recentSlothashes).
		SetBubblegumProgramAccount(bubblegumProgram).
		SetWlNftTreeAccount(wlNftTree).
		SetTreeAccount(tree).
		SetWlNftTreeAuthorityAccount(wlNftTreeAuthority)
}
