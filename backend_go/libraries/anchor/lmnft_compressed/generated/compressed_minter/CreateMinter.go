// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package compressed_minter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreateMinter is the `createMinter` instruction.
type CreateMinter struct {
	CreateMinterInput *CreateMinterInput

	// [0] = [WRITE, SIGNER] authority
	//
	// [1] = [SIGNER] seed
	//
	// [2] = [WRITE] minter
	//
	// [3] = [WRITE] nameBank
	//
	// [4] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateMinterInstructionBuilder creates a new `CreateMinter` instruction builder.
func NewCreateMinterInstructionBuilder() *CreateMinter {
	nd := &CreateMinter{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetCreateMinterInput sets the "createMinterInput" parameter.
func (inst *CreateMinter) SetCreateMinterInput(createMinterInput CreateMinterInput) *CreateMinter {
	inst.CreateMinterInput = &createMinterInput
	return inst
}

// SetAuthorityAccount sets the "authority" account.
func (inst *CreateMinter) SetAuthorityAccount(authority ag_solanago.PublicKey) *CreateMinter {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(authority).WRITE().SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *CreateMinter) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetSeedAccount sets the "seed" account.
func (inst *CreateMinter) SetSeedAccount(seed ag_solanago.PublicKey) *CreateMinter {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(seed).SIGNER()
	return inst
}

// GetSeedAccount gets the "seed" account.
func (inst *CreateMinter) GetSeedAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMinterAccount sets the "minter" account.
func (inst *CreateMinter) SetMinterAccount(minter ag_solanago.PublicKey) *CreateMinter {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(minter).WRITE()
	return inst
}

// GetMinterAccount gets the "minter" account.
func (inst *CreateMinter) GetMinterAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetNameBankAccount sets the "nameBank" account.
func (inst *CreateMinter) SetNameBankAccount(nameBank ag_solanago.PublicKey) *CreateMinter {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(nameBank).WRITE()
	return inst
}

// GetNameBankAccount gets the "nameBank" account.
func (inst *CreateMinter) GetNameBankAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *CreateMinter) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateMinter {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *CreateMinter) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst CreateMinter) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateMinter,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateMinter) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateMinter) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.CreateMinterInput == nil {
			return errors.New("CreateMinterInput parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Seed is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Minter is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.NameBank is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *CreateMinter) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateMinter")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("CreateMinterInput", *inst.CreateMinterInput))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("    authority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         seed", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       minter", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("     nameBank", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj CreateMinter) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `CreateMinterInput` param:
	err = encoder.Encode(obj.CreateMinterInput)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreateMinter) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `CreateMinterInput`:
	err = decoder.Decode(&obj.CreateMinterInput)
	if err != nil {
		return err
	}
	return nil
}

// NewCreateMinterInstruction declares a new CreateMinter instruction with the provided parameters and accounts.
func NewCreateMinterInstruction(
	// Parameters:
	createMinterInput CreateMinterInput,
	// Accounts:
	authority ag_solanago.PublicKey,
	seed ag_solanago.PublicKey,
	minter ag_solanago.PublicKey,
	nameBank ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *CreateMinter {
	return NewCreateMinterInstructionBuilder().
		SetCreateMinterInput(createMinterInput).
		SetAuthorityAccount(authority).
		SetSeedAccount(seed).
		SetMinterAccount(minter).
		SetNameBankAccount(nameBank).
		SetSystemProgramAccount(systemProgram)
}
