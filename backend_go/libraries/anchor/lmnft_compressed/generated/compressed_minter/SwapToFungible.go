// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package compressed_minter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SwapToFungible is the `swapToFungible` instruction.
type SwapToFungible struct {

	// [0] = [SIGNER] authority
	//
	// [1] = [WRITE] machine
	//
	// [2] = [WRITE] deployment
	//
	// [3] = [WRITE, SIGNER] payer
	//
	// [4] = [WRITE] fungibleMint
	//
	// [5] = [WRITE] hashlistMarker
	//
	// [6] = [WRITE] fungibleSourceTokenAccount
	//
	// [7] = [WRITE] fungibleTargetTokenAccount
	//
	// [8] = [WRITE] nonFungibleMint
	//
	// [9] = [WRITE] nonFungibleSourceTokenAccount
	//
	// [10] = [WRITE] nonFungibleTargetTokenAccount
	//
	// [11] = [] tokenProgram22
	//
	// [12] = [] tokenProgram
	//
	// [13] = [] associatedTokenProgram
	//
	// [14] = [] systemProgram
	//
	// [15] = [] sysvarInstructions
	//
	// [16] = [] fairLaunchProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSwapToFungibleInstructionBuilder creates a new `SwapToFungible` instruction builder.
func NewSwapToFungibleInstructionBuilder() *SwapToFungible {
	nd := &SwapToFungible{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 17),
	}
	return nd
}

// SetAuthorityAccount sets the "authority" account.
func (inst *SwapToFungible) SetAuthorityAccount(authority ag_solanago.PublicKey) *SwapToFungible {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *SwapToFungible) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMachineAccount sets the "machine" account.
func (inst *SwapToFungible) SetMachineAccount(machine ag_solanago.PublicKey) *SwapToFungible {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(machine).WRITE()
	return inst
}

// GetMachineAccount gets the "machine" account.
func (inst *SwapToFungible) GetMachineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetDeploymentAccount sets the "deployment" account.
func (inst *SwapToFungible) SetDeploymentAccount(deployment ag_solanago.PublicKey) *SwapToFungible {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(deployment).WRITE()
	return inst
}

// GetDeploymentAccount gets the "deployment" account.
func (inst *SwapToFungible) GetDeploymentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPayerAccount sets the "payer" account.
func (inst *SwapToFungible) SetPayerAccount(payer ag_solanago.PublicKey) *SwapToFungible {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *SwapToFungible) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetFungibleMintAccount sets the "fungibleMint" account.
func (inst *SwapToFungible) SetFungibleMintAccount(fungibleMint ag_solanago.PublicKey) *SwapToFungible {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(fungibleMint).WRITE()
	return inst
}

// GetFungibleMintAccount gets the "fungibleMint" account.
func (inst *SwapToFungible) GetFungibleMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetHashlistMarkerAccount sets the "hashlistMarker" account.
func (inst *SwapToFungible) SetHashlistMarkerAccount(hashlistMarker ag_solanago.PublicKey) *SwapToFungible {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(hashlistMarker).WRITE()
	return inst
}

// GetHashlistMarkerAccount gets the "hashlistMarker" account.
func (inst *SwapToFungible) GetHashlistMarkerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetFungibleSourceTokenAccountAccount sets the "fungibleSourceTokenAccount" account.
func (inst *SwapToFungible) SetFungibleSourceTokenAccountAccount(fungibleSourceTokenAccount ag_solanago.PublicKey) *SwapToFungible {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(fungibleSourceTokenAccount).WRITE()
	return inst
}

// GetFungibleSourceTokenAccountAccount gets the "fungibleSourceTokenAccount" account.
func (inst *SwapToFungible) GetFungibleSourceTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetFungibleTargetTokenAccountAccount sets the "fungibleTargetTokenAccount" account.
func (inst *SwapToFungible) SetFungibleTargetTokenAccountAccount(fungibleTargetTokenAccount ag_solanago.PublicKey) *SwapToFungible {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(fungibleTargetTokenAccount).WRITE()
	return inst
}

// GetFungibleTargetTokenAccountAccount gets the "fungibleTargetTokenAccount" account.
func (inst *SwapToFungible) GetFungibleTargetTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetNonFungibleMintAccount sets the "nonFungibleMint" account.
func (inst *SwapToFungible) SetNonFungibleMintAccount(nonFungibleMint ag_solanago.PublicKey) *SwapToFungible {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(nonFungibleMint).WRITE()
	return inst
}

// GetNonFungibleMintAccount gets the "nonFungibleMint" account.
func (inst *SwapToFungible) GetNonFungibleMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetNonFungibleSourceTokenAccountAccount sets the "nonFungibleSourceTokenAccount" account.
func (inst *SwapToFungible) SetNonFungibleSourceTokenAccountAccount(nonFungibleSourceTokenAccount ag_solanago.PublicKey) *SwapToFungible {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(nonFungibleSourceTokenAccount).WRITE()
	return inst
}

// GetNonFungibleSourceTokenAccountAccount gets the "nonFungibleSourceTokenAccount" account.
func (inst *SwapToFungible) GetNonFungibleSourceTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetNonFungibleTargetTokenAccountAccount sets the "nonFungibleTargetTokenAccount" account.
func (inst *SwapToFungible) SetNonFungibleTargetTokenAccountAccount(nonFungibleTargetTokenAccount ag_solanago.PublicKey) *SwapToFungible {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(nonFungibleTargetTokenAccount).WRITE()
	return inst
}

// GetNonFungibleTargetTokenAccountAccount gets the "nonFungibleTargetTokenAccount" account.
func (inst *SwapToFungible) GetNonFungibleTargetTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenProgram22Account sets the "tokenProgram22" account.
func (inst *SwapToFungible) SetTokenProgram22Account(tokenProgram22 ag_solanago.PublicKey) *SwapToFungible {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenProgram22)
	return inst
}

// GetTokenProgram22Account gets the "tokenProgram22" account.
func (inst *SwapToFungible) GetTokenProgram22Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *SwapToFungible) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *SwapToFungible {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *SwapToFungible) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *SwapToFungible) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *SwapToFungible {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *SwapToFungible) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *SwapToFungible) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *SwapToFungible {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *SwapToFungible) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetSysvarInstructionsAccount sets the "sysvarInstructions" account.
func (inst *SwapToFungible) SetSysvarInstructionsAccount(sysvarInstructions ag_solanago.PublicKey) *SwapToFungible {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(sysvarInstructions)
	return inst
}

// GetSysvarInstructionsAccount gets the "sysvarInstructions" account.
func (inst *SwapToFungible) GetSysvarInstructionsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetFairLaunchProgramAccount sets the "fairLaunchProgram" account.
func (inst *SwapToFungible) SetFairLaunchProgramAccount(fairLaunchProgram ag_solanago.PublicKey) *SwapToFungible {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(fairLaunchProgram)
	return inst
}

// GetFairLaunchProgramAccount gets the "fairLaunchProgram" account.
func (inst *SwapToFungible) GetFairLaunchProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

func (inst SwapToFungible) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SwapToFungible,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SwapToFungible) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SwapToFungible) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Machine is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Deployment is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.FungibleMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.HashlistMarker is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.FungibleSourceTokenAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.FungibleTargetTokenAccount is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.NonFungibleMint is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.NonFungibleSourceTokenAccount is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.NonFungibleTargetTokenAccount is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TokenProgram22 is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.SysvarInstructions is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.FairLaunchProgram is not set")
		}
	}
	return nil
}

func (inst *SwapToFungible) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SwapToFungible")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=17]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("             authority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("               machine", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("            deployment", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                 payer", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("          fungibleMint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("        hashlistMarker", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("   fungibleSourceToken", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("   fungibleTargetToken", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("       nonFungibleMint", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("nonFungibleSourceToken", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("nonFungibleTargetToken", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("        tokenProgram22", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("          tokenProgram", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("associatedTokenProgram", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("         systemProgram", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("    sysvarInstructions", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("     fairLaunchProgram", inst.AccountMetaSlice.Get(16)))
					})
				})
		})
}

func (obj SwapToFungible) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *SwapToFungible) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewSwapToFungibleInstruction declares a new SwapToFungible instruction with the provided parameters and accounts.
func NewSwapToFungibleInstruction(
	// Accounts:
	authority ag_solanago.PublicKey,
	machine ag_solanago.PublicKey,
	deployment ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	fungibleMint ag_solanago.PublicKey,
	hashlistMarker ag_solanago.PublicKey,
	fungibleSourceTokenAccount ag_solanago.PublicKey,
	fungibleTargetTokenAccount ag_solanago.PublicKey,
	nonFungibleMint ag_solanago.PublicKey,
	nonFungibleSourceTokenAccount ag_solanago.PublicKey,
	nonFungibleTargetTokenAccount ag_solanago.PublicKey,
	tokenProgram22 ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	sysvarInstructions ag_solanago.PublicKey,
	fairLaunchProgram ag_solanago.PublicKey) *SwapToFungible {
	return NewSwapToFungibleInstructionBuilder().
		SetAuthorityAccount(authority).
		SetMachineAccount(machine).
		SetDeploymentAccount(deployment).
		SetPayerAccount(payer).
		SetFungibleMintAccount(fungibleMint).
		SetHashlistMarkerAccount(hashlistMarker).
		SetFungibleSourceTokenAccountAccount(fungibleSourceTokenAccount).
		SetFungibleTargetTokenAccountAccount(fungibleTargetTokenAccount).
		SetNonFungibleMintAccount(nonFungibleMint).
		SetNonFungibleSourceTokenAccountAccount(nonFungibleSourceTokenAccount).
		SetNonFungibleTargetTokenAccountAccount(nonFungibleTargetTokenAccount).
		SetTokenProgram22Account(tokenProgram22).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetSysvarInstructionsAccount(sysvarInstructions).
		SetFairLaunchProgramAccount(fairLaunchProgram)
}
