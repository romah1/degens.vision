// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package nft_candy_machine

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "NftCandyMachine"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_SetName = ag_binary.TypeID([8]byte{78, 194, 111, 229, 198, 169, 162, 106})

	Instruction_MintV6 = ag_binary.TypeID([8]byte{111, 169, 221, 193, 234, 227, 8, 180})

	Instruction_MintV2 = ag_binary.TypeID([8]byte{120, 121, 23, 146, 173, 110, 199, 205})

	Instruction_LockPrice = ag_binary.TypeID([8]byte{244, 111, 220, 141, 59, 51, 182, 226})

	Instruction_EditCmV6 = ag_binary.TypeID([8]byte{8, 151, 9, 92, 26, 236, 43, 194})

	Instruction_RevealV6 = ag_binary.TypeID([8]byte{96, 31, 203, 62, 198, 112, 162, 73})

	Instruction_AllowUnfreezeV6 = ag_binary.TypeID([8]byte{218, 161, 193, 67, 230, 24, 153, 227})

	Instruction_AllowRevealV6 = ag_binary.TypeID([8]byte{26, 70, 81, 233, 255, 128, 149, 36})

	Instruction_BurnSupplyV6 = ag_binary.TypeID([8]byte{155, 195, 120, 109, 95, 193, 192, 151})

	Instruction_BurnFrozen = ag_binary.TypeID([8]byte{115, 215, 82, 186, 58, 93, 69, 24})

	Instruction_Migrate = ag_binary.TypeID([8]byte{155, 234, 231, 146, 236, 158, 162, 30})

	Instruction_ThawV6 = ag_binary.TypeID([8]byte{235, 243, 216, 226, 135, 47, 129, 80})

	Instruction_InitCmV6Ocp = ag_binary.TypeID([8]byte{215, 171, 234, 95, 164, 147, 93, 255})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_SetName:
		return "SetName"
	case Instruction_MintV6:
		return "MintV6"
	case Instruction_MintV2:
		return "MintV2"
	case Instruction_LockPrice:
		return "LockPrice"
	case Instruction_EditCmV6:
		return "EditCmV6"
	case Instruction_RevealV6:
		return "RevealV6"
	case Instruction_AllowUnfreezeV6:
		return "AllowUnfreezeV6"
	case Instruction_AllowRevealV6:
		return "AllowRevealV6"
	case Instruction_BurnSupplyV6:
		return "BurnSupplyV6"
	case Instruction_BurnFrozen:
		return "BurnFrozen"
	case Instruction_Migrate:
		return "Migrate"
	case Instruction_ThawV6:
		return "ThawV6"
	case Instruction_InitCmV6Ocp:
		return "InitCmV6Ocp"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"set_name", (*SetName)(nil),
		},
		{
			"mint_v6", (*MintV6)(nil),
		},
		{
			"mint_v2", (*MintV2)(nil),
		},
		{
			"lock_price", (*LockPrice)(nil),
		},
		{
			"edit_cm_v6", (*EditCmV6)(nil),
		},
		{
			"reveal_v6", (*RevealV6)(nil),
		},
		{
			"allow_unfreeze_v6", (*AllowUnfreezeV6)(nil),
		},
		{
			"allow_reveal_v6", (*AllowRevealV6)(nil),
		},
		{
			"burn_supply_v6", (*BurnSupplyV6)(nil),
		},
		{
			"burn_frozen", (*BurnFrozen)(nil),
		},
		{
			"migrate", (*Migrate)(nil),
		},
		{
			"thaw_v6", (*ThawV6)(nil),
		},
		{
			"init_cm_v6_ocp", (*InitCmV6Ocp)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
