// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package nft_candy_machine

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// MintV6 is the `mintV6` instruction.
type MintV6 struct {
	Proof          *[][32]uint8
	Expect         *uint64
	ToggleState    *uint8
	ExpectedRefund *uint8

	// [0] = [WRITE] candyMachine
	//
	// [1] = [WRITE, SIGNER] payer
	//
	// [2] = [WRITE] wallet
	//
	// [3] = [WRITE] wallet2
	//
	// [4] = [WRITE] metadata
	//
	// [5] = [WRITE, SIGNER] mint
	//
	// [6] = [WRITE] associated
	//
	// [7] = [WRITE] masterEdition
	//
	// [8] = [WRITE] totalMints
	//
	// [9] = [] associatedTokenProgram
	//
	// [10] = [] tokenMetadataProgram
	//
	// [11] = [] tokenProgram
	//
	// [12] = [] systemProgram
	//
	// [13] = [] instructionSysvarAccount
	//
	// [14] = [] collectionMint
	//
	// [15] = [WRITE] collectionMetadata
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMintV6InstructionBuilder creates a new `MintV6` instruction builder.
func NewMintV6InstructionBuilder() *MintV6 {
	nd := &MintV6{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 16),
	}
	return nd
}

// SetProof sets the "proof" parameter.
func (inst *MintV6) SetProof(proof [][32]uint8) *MintV6 {
	inst.Proof = &proof
	return inst
}

// SetExpect sets the "expect" parameter.
func (inst *MintV6) SetExpect(expect uint64) *MintV6 {
	inst.Expect = &expect
	return inst
}

// SetToggleState sets the "toggleState" parameter.
func (inst *MintV6) SetToggleState(toggleState uint8) *MintV6 {
	inst.ToggleState = &toggleState
	return inst
}

// SetExpectedRefund sets the "expectedRefund" parameter.
func (inst *MintV6) SetExpectedRefund(expectedRefund uint8) *MintV6 {
	inst.ExpectedRefund = &expectedRefund
	return inst
}

// SetCandyMachineAccount sets the "candyMachine" account.
func (inst *MintV6) SetCandyMachineAccount(candyMachine ag_solanago.PublicKey) *MintV6 {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(candyMachine).WRITE()
	return inst
}

// GetCandyMachineAccount gets the "candyMachine" account.
func (inst *MintV6) GetCandyMachineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPayerAccount sets the "payer" account.
func (inst *MintV6) SetPayerAccount(payer ag_solanago.PublicKey) *MintV6 {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *MintV6) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetWalletAccount sets the "wallet" account.
func (inst *MintV6) SetWalletAccount(wallet ag_solanago.PublicKey) *MintV6 {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(wallet).WRITE()
	return inst
}

// GetWalletAccount gets the "wallet" account.
func (inst *MintV6) GetWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetWallet2Account sets the "wallet2" account.
func (inst *MintV6) SetWallet2Account(wallet2 ag_solanago.PublicKey) *MintV6 {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(wallet2).WRITE()
	return inst
}

// GetWallet2Account gets the "wallet2" account.
func (inst *MintV6) GetWallet2Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetMetadataAccount sets the "metadata" account.
func (inst *MintV6) SetMetadataAccount(metadata ag_solanago.PublicKey) *MintV6 {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(metadata).WRITE()
	return inst
}

// GetMetadataAccount gets the "metadata" account.
func (inst *MintV6) GetMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetMintAccount sets the "mint" account.
func (inst *MintV6) SetMintAccount(mint ag_solanago.PublicKey) *MintV6 {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(mint).WRITE().SIGNER()
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *MintV6) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetAssociatedAccount sets the "associated" account.
func (inst *MintV6) SetAssociatedAccount(associated ag_solanago.PublicKey) *MintV6 {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(associated).WRITE()
	return inst
}

// GetAssociatedAccount gets the "associated" account.
func (inst *MintV6) GetAssociatedAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetMasterEditionAccount sets the "masterEdition" account.
func (inst *MintV6) SetMasterEditionAccount(masterEdition ag_solanago.PublicKey) *MintV6 {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(masterEdition).WRITE()
	return inst
}

// GetMasterEditionAccount gets the "masterEdition" account.
func (inst *MintV6) GetMasterEditionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTotalMintsAccount sets the "totalMints" account.
func (inst *MintV6) SetTotalMintsAccount(totalMints ag_solanago.PublicKey) *MintV6 {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(totalMints).WRITE()
	return inst
}

// GetTotalMintsAccount gets the "totalMints" account.
func (inst *MintV6) GetTotalMintsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *MintV6) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *MintV6 {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *MintV6) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenMetadataProgramAccount sets the "tokenMetadataProgram" account.
func (inst *MintV6) SetTokenMetadataProgramAccount(tokenMetadataProgram ag_solanago.PublicKey) *MintV6 {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenMetadataProgram)
	return inst
}

// GetTokenMetadataProgramAccount gets the "tokenMetadataProgram" account.
func (inst *MintV6) GetTokenMetadataProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *MintV6) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *MintV6 {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *MintV6) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *MintV6) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *MintV6 {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *MintV6) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetInstructionSysvarAccountAccount sets the "instructionSysvarAccount" account.
func (inst *MintV6) SetInstructionSysvarAccountAccount(instructionSysvarAccount ag_solanago.PublicKey) *MintV6 {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(instructionSysvarAccount)
	return inst
}

// GetInstructionSysvarAccountAccount gets the "instructionSysvarAccount" account.
func (inst *MintV6) GetInstructionSysvarAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetCollectionMintAccount sets the "collectionMint" account.
func (inst *MintV6) SetCollectionMintAccount(collectionMint ag_solanago.PublicKey) *MintV6 {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(collectionMint)
	return inst
}

// GetCollectionMintAccount gets the "collectionMint" account.
func (inst *MintV6) GetCollectionMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetCollectionMetadataAccount sets the "collectionMetadata" account.
func (inst *MintV6) SetCollectionMetadataAccount(collectionMetadata ag_solanago.PublicKey) *MintV6 {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(collectionMetadata).WRITE()
	return inst
}

// GetCollectionMetadataAccount gets the "collectionMetadata" account.
func (inst *MintV6) GetCollectionMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

func (inst MintV6) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MintV6,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MintV6) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MintV6) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Proof == nil {
			return errors.New("Proof parameter is not set")
		}
		if inst.Expect == nil {
			return errors.New("Expect parameter is not set")
		}
		if inst.ToggleState == nil {
			return errors.New("ToggleState parameter is not set")
		}
		if inst.ExpectedRefund == nil {
			return errors.New("ExpectedRefund parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.CandyMachine is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Wallet is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Wallet2 is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Metadata is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Associated is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.MasterEdition is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TotalMints is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenMetadataProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.InstructionSysvarAccount is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.CollectionMint is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.CollectionMetadata is not set")
		}
	}
	return nil
}

func (inst *MintV6) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MintV6")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=4]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("         Proof", *inst.Proof))
						paramsBranch.Child(ag_format.Param("        Expect", *inst.Expect))
						paramsBranch.Child(ag_format.Param("   ToggleState", *inst.ToggleState))
						paramsBranch.Child(ag_format.Param("ExpectedRefund", *inst.ExpectedRefund))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=16]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("          candyMachine", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                 payer", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                wallet", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("               wallet2", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("              metadata", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                  mint", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("            associated", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("         masterEdition", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("            totalMints", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("associatedTokenProgram", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("  tokenMetadataProgram", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("          tokenProgram", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("         systemProgram", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("     instructionSysvar", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("        collectionMint", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("    collectionMetadata", inst.AccountMetaSlice.Get(15)))
					})
				})
		})
}

func (obj MintV6) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Proof` param:
	err = encoder.Encode(obj.Proof)
	if err != nil {
		return err
	}
	// Serialize `Expect` param:
	err = encoder.Encode(obj.Expect)
	if err != nil {
		return err
	}
	// Serialize `ToggleState` param:
	err = encoder.Encode(obj.ToggleState)
	if err != nil {
		return err
	}
	// Serialize `ExpectedRefund` param:
	err = encoder.Encode(obj.ExpectedRefund)
	if err != nil {
		return err
	}
	return nil
}
func (obj *MintV6) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Proof`:
	err = decoder.Decode(&obj.Proof)
	if err != nil {
		return err
	}
	// Deserialize `Expect`:
	err = decoder.Decode(&obj.Expect)
	if err != nil {
		return err
	}
	// Deserialize `ToggleState`:
	err = decoder.Decode(&obj.ToggleState)
	if err != nil {
		return err
	}
	// Deserialize `ExpectedRefund`:
	err = decoder.Decode(&obj.ExpectedRefund)
	if err != nil {
		return err
	}
	return nil
}

// NewMintV6Instruction declares a new MintV6 instruction with the provided parameters and accounts.
func NewMintV6Instruction(
	// Parameters:
	proof [][32]uint8,
	expect uint64,
	toggleState uint8,
	expectedRefund uint8,
	// Accounts:
	candyMachine ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	wallet ag_solanago.PublicKey,
	wallet2 ag_solanago.PublicKey,
	metadata ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	associated ag_solanago.PublicKey,
	masterEdition ag_solanago.PublicKey,
	totalMints ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	tokenMetadataProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	instructionSysvarAccount ag_solanago.PublicKey,
	collectionMint ag_solanago.PublicKey,
	collectionMetadata ag_solanago.PublicKey) *MintV6 {
	return NewMintV6InstructionBuilder().
		SetProof(proof).
		SetExpect(expect).
		SetToggleState(toggleState).
		SetExpectedRefund(expectedRefund).
		SetCandyMachineAccount(candyMachine).
		SetPayerAccount(payer).
		SetWalletAccount(wallet).
		SetWallet2Account(wallet2).
		SetMetadataAccount(metadata).
		SetMintAccount(mint).
		SetAssociatedAccount(associated).
		SetMasterEditionAccount(masterEdition).
		SetTotalMintsAccount(totalMints).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetTokenMetadataProgramAccount(tokenMetadataProgram).
		SetTokenProgramAccount(tokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetInstructionSysvarAccountAccount(instructionSysvarAccount).
		SetCollectionMintAccount(collectionMint).
		SetCollectionMetadataAccount(collectionMetadata)
}
