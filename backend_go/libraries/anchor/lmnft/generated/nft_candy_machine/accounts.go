// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package nft_candy_machine

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type Extensions struct {
	PriceLock *uint64 `bin:"optional"`
	Flags     [50]uint8
}

var ExtensionsDiscriminator = [8]byte{243, 215, 49, 207, 31, 104, 238, 130}

func (obj Extensions) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(ExtensionsDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `PriceLock` param (optional):
	{
		if obj.PriceLock == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.PriceLock)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Flags` param:
	err = encoder.Encode(obj.Flags)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Extensions) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(ExtensionsDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[243 215 49 207 31 104 238 130]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `PriceLock` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.PriceLock)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Flags`:
	err = decoder.Decode(&obj.Flags)
	if err != nil {
		return err
	}
	return nil
}

type CandyMachineV2 struct {
	Authority     ag_solanago.PublicKey
	Wallet        ag_solanago.PublicKey
	ItemsRedeemed uint64
	Data          CandyMachineDataV2
}

var CandyMachineV2Discriminator = [8]byte{50, 243, 71, 181, 164, 239, 110, 131}

func (obj CandyMachineV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(CandyMachineV2Discriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Authority` param:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return err
	}
	// Serialize `Wallet` param:
	err = encoder.Encode(obj.Wallet)
	if err != nil {
		return err
	}
	// Serialize `ItemsRedeemed` param:
	err = encoder.Encode(obj.ItemsRedeemed)
	if err != nil {
		return err
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CandyMachineV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(CandyMachineV2Discriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[50 243 71 181 164 239 110 131]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return err
	}
	// Deserialize `Wallet`:
	err = decoder.Decode(&obj.Wallet)
	if err != nil {
		return err
	}
	// Deserialize `ItemsRedeemed`:
	err = decoder.Decode(&obj.ItemsRedeemed)
	if err != nil {
		return err
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	return nil
}

type CandyMachineV3 struct {
	Seed          ag_solanago.PublicKey
	Bump          uint8
	Authority     ag_solanago.PublicKey
	Wallet        ag_solanago.PublicKey
	ItemsRedeemed uint64
	Data          CandyMachineDataV2
}

var CandyMachineV3Discriminator = [8]byte{221, 21, 200, 78, 142, 15, 223, 6}

func (obj CandyMachineV3) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(CandyMachineV3Discriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Seed` param:
	err = encoder.Encode(obj.Seed)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Authority` param:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return err
	}
	// Serialize `Wallet` param:
	err = encoder.Encode(obj.Wallet)
	if err != nil {
		return err
	}
	// Serialize `ItemsRedeemed` param:
	err = encoder.Encode(obj.ItemsRedeemed)
	if err != nil {
		return err
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CandyMachineV3) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(CandyMachineV3Discriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[221 21 200 78 142 15 223 6]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Seed`:
	err = decoder.Decode(&obj.Seed)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return err
	}
	// Deserialize `Wallet`:
	err = decoder.Decode(&obj.Wallet)
	if err != nil {
		return err
	}
	// Deserialize `ItemsRedeemed`:
	err = decoder.Decode(&obj.ItemsRedeemed)
	if err != nil {
		return err
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	return nil
}

type CandyMachineV4 struct {
	Seed          ag_solanago.PublicKey
	Bump          uint8
	Authority     ag_solanago.PublicKey
	Wallet        ag_solanago.PublicKey
	ItemsRedeemed uint64
	Data          CandyMachineDataV2
	ThawDate      *int64 `bin:"optional"`
	AllowThaw     bool
	RevealedUri   *string `bin:"optional"`
}

var CandyMachineV4Discriminator = [8]byte{247, 230, 179, 162, 114, 0, 193, 179}

func (obj CandyMachineV4) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(CandyMachineV4Discriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Seed` param:
	err = encoder.Encode(obj.Seed)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Authority` param:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return err
	}
	// Serialize `Wallet` param:
	err = encoder.Encode(obj.Wallet)
	if err != nil {
		return err
	}
	// Serialize `ItemsRedeemed` param:
	err = encoder.Encode(obj.ItemsRedeemed)
	if err != nil {
		return err
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	// Serialize `ThawDate` param (optional):
	{
		if obj.ThawDate == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.ThawDate)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `AllowThaw` param:
	err = encoder.Encode(obj.AllowThaw)
	if err != nil {
		return err
	}
	// Serialize `RevealedUri` param (optional):
	{
		if obj.RevealedUri == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.RevealedUri)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *CandyMachineV4) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(CandyMachineV4Discriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[247 230 179 162 114 0 193 179]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Seed`:
	err = decoder.Decode(&obj.Seed)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return err
	}
	// Deserialize `Wallet`:
	err = decoder.Decode(&obj.Wallet)
	if err != nil {
		return err
	}
	// Deserialize `ItemsRedeemed`:
	err = decoder.Decode(&obj.ItemsRedeemed)
	if err != nil {
		return err
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	// Deserialize `ThawDate` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.ThawDate)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `AllowThaw`:
	err = decoder.Decode(&obj.AllowThaw)
	if err != nil {
		return err
	}
	// Deserialize `RevealedUri` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.RevealedUri)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type CandyMachineV5 struct {
	Seed           ag_solanago.PublicKey
	Bump           uint8
	Authority      ag_solanago.PublicKey
	Wallet         ag_solanago.PublicKey
	ItemsRedeemed  uint64
	ThawDate       *int64 `bin:"optional"`
	AllowThaw      bool
	RevealedUri    *string `bin:"optional"`
	Data           CandyMachineDataV3
	RequiredSigned *ag_solanago.PublicKey `bin:"optional"`
}

var CandyMachineV5Discriminator = [8]byte{193, 154, 145, 64, 82, 69, 127, 140}

func (obj CandyMachineV5) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(CandyMachineV5Discriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Seed` param:
	err = encoder.Encode(obj.Seed)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Authority` param:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return err
	}
	// Serialize `Wallet` param:
	err = encoder.Encode(obj.Wallet)
	if err != nil {
		return err
	}
	// Serialize `ItemsRedeemed` param:
	err = encoder.Encode(obj.ItemsRedeemed)
	if err != nil {
		return err
	}
	// Serialize `ThawDate` param (optional):
	{
		if obj.ThawDate == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.ThawDate)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `AllowThaw` param:
	err = encoder.Encode(obj.AllowThaw)
	if err != nil {
		return err
	}
	// Serialize `RevealedUri` param (optional):
	{
		if obj.RevealedUri == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.RevealedUri)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	// Serialize `RequiredSigned` param (optional):
	{
		if obj.RequiredSigned == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.RequiredSigned)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *CandyMachineV5) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(CandyMachineV5Discriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[193 154 145 64 82 69 127 140]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Seed`:
	err = decoder.Decode(&obj.Seed)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return err
	}
	// Deserialize `Wallet`:
	err = decoder.Decode(&obj.Wallet)
	if err != nil {
		return err
	}
	// Deserialize `ItemsRedeemed`:
	err = decoder.Decode(&obj.ItemsRedeemed)
	if err != nil {
		return err
	}
	// Deserialize `ThawDate` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.ThawDate)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `AllowThaw`:
	err = decoder.Decode(&obj.AllowThaw)
	if err != nil {
		return err
	}
	// Deserialize `RevealedUri` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.RevealedUri)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	// Deserialize `RequiredSigned` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.RequiredSigned)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type CandyMachineV6 struct {
	Seed             ag_solanago.PublicKey
	Bump             uint8
	Authority        ag_solanago.PublicKey
	Wallet           ag_solanago.PublicKey
	ItemsRedeemed    uint64
	ThawDate         *int64 `bin:"optional"`
	AllowThaw        bool
	RevealedUri      *string `bin:"optional"`
	Data             CandyMachineDataV3
	RequiredSigned   *ag_solanago.PublicKey `bin:"optional"`
	Name             string
	EnforceRoyalties bool
	CollectionMint   *ag_solanago.PublicKey `bin:"optional"`
}

var CandyMachineV6Discriminator = [8]byte{196, 204, 36, 6, 18, 215, 199, 134}

func (obj CandyMachineV6) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(CandyMachineV6Discriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Seed` param:
	err = encoder.Encode(obj.Seed)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Authority` param:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return err
	}
	// Serialize `Wallet` param:
	err = encoder.Encode(obj.Wallet)
	if err != nil {
		return err
	}
	// Serialize `ItemsRedeemed` param:
	err = encoder.Encode(obj.ItemsRedeemed)
	if err != nil {
		return err
	}
	// Serialize `ThawDate` param (optional):
	{
		if obj.ThawDate == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.ThawDate)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `AllowThaw` param:
	err = encoder.Encode(obj.AllowThaw)
	if err != nil {
		return err
	}
	// Serialize `RevealedUri` param (optional):
	{
		if obj.RevealedUri == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.RevealedUri)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	// Serialize `RequiredSigned` param (optional):
	{
		if obj.RequiredSigned == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.RequiredSigned)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `EnforceRoyalties` param:
	err = encoder.Encode(obj.EnforceRoyalties)
	if err != nil {
		return err
	}
	// Serialize `CollectionMint` param (optional):
	{
		if obj.CollectionMint == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.CollectionMint)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *CandyMachineV6) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(CandyMachineV6Discriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[196 204 36 6 18 215 199 134]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Seed`:
	err = decoder.Decode(&obj.Seed)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return err
	}
	// Deserialize `Wallet`:
	err = decoder.Decode(&obj.Wallet)
	if err != nil {
		return err
	}
	// Deserialize `ItemsRedeemed`:
	err = decoder.Decode(&obj.ItemsRedeemed)
	if err != nil {
		return err
	}
	// Deserialize `ThawDate` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.ThawDate)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `AllowThaw`:
	err = decoder.Decode(&obj.AllowThaw)
	if err != nil {
		return err
	}
	// Deserialize `RevealedUri` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.RevealedUri)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	// Deserialize `RequiredSigned` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.RequiredSigned)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `EnforceRoyalties`:
	err = decoder.Decode(&obj.EnforceRoyalties)
	if err != nil {
		return err
	}
	// Deserialize `CollectionMint` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.CollectionMint)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type TotalMints struct {
	Total uint32
}

var TotalMintsDiscriminator = [8]byte{5, 252, 73, 108, 50, 30, 212, 224}

func (obj TotalMints) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(TotalMintsDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Total` param:
	err = encoder.Encode(obj.Total)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TotalMints) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(TotalMintsDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[5 252 73 108 50 30 212 224]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Total`:
	err = decoder.Decode(&obj.Total)
	if err != nil {
		return err
	}
	return nil
}
