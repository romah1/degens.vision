// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package nft_candy_machine

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// RevealV6 is the `revealV6` instruction.
type RevealV6 struct {

	// [0] = [WRITE] candyMachine
	//
	// [1] = [WRITE] metadata
	//
	// [2] = [] tokenMetadataProgram
	//
	// [3] = [] mint
	//
	// [4] = [] authorizationRules
	//
	// [5] = [] authorizationRulesProgram
	//
	// [6] = [] systemProgram
	//
	// [7] = [] sysvarInstructions
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewRevealV6InstructionBuilder creates a new `RevealV6` instruction builder.
func NewRevealV6InstructionBuilder() *RevealV6 {
	nd := &RevealV6{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetCandyMachineAccount sets the "candyMachine" account.
func (inst *RevealV6) SetCandyMachineAccount(candyMachine ag_solanago.PublicKey) *RevealV6 {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(candyMachine).WRITE()
	return inst
}

// GetCandyMachineAccount gets the "candyMachine" account.
func (inst *RevealV6) GetCandyMachineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMetadataAccount sets the "metadata" account.
func (inst *RevealV6) SetMetadataAccount(metadata ag_solanago.PublicKey) *RevealV6 {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(metadata).WRITE()
	return inst
}

// GetMetadataAccount gets the "metadata" account.
func (inst *RevealV6) GetMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenMetadataProgramAccount sets the "tokenMetadataProgram" account.
func (inst *RevealV6) SetTokenMetadataProgramAccount(tokenMetadataProgram ag_solanago.PublicKey) *RevealV6 {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenMetadataProgram)
	return inst
}

// GetTokenMetadataProgramAccount gets the "tokenMetadataProgram" account.
func (inst *RevealV6) GetTokenMetadataProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMintAccount sets the "mint" account.
func (inst *RevealV6) SetMintAccount(mint ag_solanago.PublicKey) *RevealV6 {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *RevealV6) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetAuthorizationRulesAccount sets the "authorizationRules" account.
func (inst *RevealV6) SetAuthorizationRulesAccount(authorizationRules ag_solanago.PublicKey) *RevealV6 {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(authorizationRules)
	return inst
}

// GetAuthorizationRulesAccount gets the "authorizationRules" account.
func (inst *RevealV6) GetAuthorizationRulesAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetAuthorizationRulesProgramAccount sets the "authorizationRulesProgram" account.
func (inst *RevealV6) SetAuthorizationRulesProgramAccount(authorizationRulesProgram ag_solanago.PublicKey) *RevealV6 {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(authorizationRulesProgram)
	return inst
}

// GetAuthorizationRulesProgramAccount gets the "authorizationRulesProgram" account.
func (inst *RevealV6) GetAuthorizationRulesProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *RevealV6) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *RevealV6 {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *RevealV6) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSysvarInstructionsAccount sets the "sysvarInstructions" account.
func (inst *RevealV6) SetSysvarInstructionsAccount(sysvarInstructions ag_solanago.PublicKey) *RevealV6 {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(sysvarInstructions)
	return inst
}

// GetSysvarInstructionsAccount gets the "sysvarInstructions" account.
func (inst *RevealV6) GetSysvarInstructionsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst RevealV6) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_RevealV6,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst RevealV6) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *RevealV6) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.CandyMachine is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Metadata is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenMetadataProgram is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.AuthorizationRules is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.AuthorizationRulesProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SysvarInstructions is not set")
		}
	}
	return nil
}

func (inst *RevealV6) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("RevealV6")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("             candyMachine", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                 metadata", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     tokenMetadataProgram", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                     mint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("       authorizationRules", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("authorizationRulesProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("            systemProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("       sysvarInstructions", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj RevealV6) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *RevealV6) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewRevealV6Instruction declares a new RevealV6 instruction with the provided parameters and accounts.
func NewRevealV6Instruction(
	// Accounts:
	candyMachine ag_solanago.PublicKey,
	metadata ag_solanago.PublicKey,
	tokenMetadataProgram ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	authorizationRules ag_solanago.PublicKey,
	authorizationRulesProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	sysvarInstructions ag_solanago.PublicKey) *RevealV6 {
	return NewRevealV6InstructionBuilder().
		SetCandyMachineAccount(candyMachine).
		SetMetadataAccount(metadata).
		SetTokenMetadataProgramAccount(tokenMetadataProgram).
		SetMintAccount(mint).
		SetAuthorizationRulesAccount(authorizationRules).
		SetAuthorizationRulesProgramAccount(authorizationRulesProgram).
		SetSystemProgramAccount(systemProgram).
		SetSysvarInstructionsAccount(sysvarInstructions)
}
